<html>
  <head>
  <title>Sciter DOM Inspector</title>
  <style>
    body { font:system; margin:0; padding:0;}  
    select#tag-list { 
      background:threedface; 
      padding:0; 
      display:block; 
      flow:horizontal; 
      width:*; 
      height:2.2em; 
      overflow-x:scroll-indicator; 
      overflow-y:none; 
      vertical-align:middle;
    }
    select#tag-list > option { 
      prototype:TagLabel; 
      background-color:#FFF; 
      vertical-align:center;
      width:max-intrinsic; 
      height:*;
      margin:3px; 
      padding:1px 0.4em 3px 0.7em; 
    }
    select#tag-list > option:current 
    { 
      background-color:threeddarkshadow; 
      color:highlighttext;  
    }
    select#tag-list:focus > option:current 
    { 
      background-color:highlight; 
      color:highlighttext;  
    }

    select#log-list { display:block; size:*; padding:1px; overflow-x:auto;}    
    select#log-list > option  
    {
       background-repeat: no-repeat;  
       background-position: 9px 3px;
       padding: 4px 1px 4px 22px;
       border-left: 6px solid transparent;
       border-bottom: 1px solid #AAA;
       white-space:pre;
       font-family:monospace;
    }
    select#log-list > option:current  { color:windowtext; outline:2px solid gray -1px;  }
    
    select#log-list > option.error    { background-image:url(res:log-error.png); background-color: #FFF8F8;}  
    select#log-list > option.info     { background-image:url(res:log-info.png); background-color: #FFF; }  
    select#log-list > option.warning  { background-image:url(res:log-warning.png); background-color: #FFFFF8; }  
    select#log-list > option.css      { border-left-color: wheat; } 
    select#log-list > option.csss     { border-left-color: tan; }
    select#log-list > option.tis      { border-left-color: salmon; } 
    select#log-list > option.dom      { border-left-color: peachpuff; } 

    frameset[cols] > * { height:*; }
    frameset[rows] > * { width:*; }
    frameset[rows] > splitter { display:block; height:6px; }
    frameset[cols] > splitter { display:block; width:6px; }
    splitter:hover { background-color:highlight; }
    
    dl { flow: row(dt,dd); overflow:scroll-indicator; background: url(theme:edit-normal) stretch; padding:1px; }
    dl > header { font-weight:bold;  white-space: nowrap; border-bottom:1px solid threedface; flow:horizontal; padding:2px 4px;}
    dl > header > a { width:max-content; margin-left:20px;}
    dl > dt { white-space: nowrap; min-width:4em; width:max-intrinsic; text-align:right; margin:0; padding:1px 2px;}
    dl > dd { white-space: nowrap; min-width:max-intrinsic; width:*; margin:0; padding:1px 2px 1px 1em; font-weight:bold;}

    list { display:block; size:*; prototype:SnippetList; overflow:scroll-indicator; 
           background: url(theme:edit-normal) stretch; padding:1px; }
    list > li { display:block; flow:horizontal; border-bottom:1px solid #BBB;}
    list > li > button  {
       display:block; 
       flow:text; 
       size:18px; padding:0; font:14px Marlett; vertical-align:middle; 
       margin:3px; hit-margin:3px; }
    list > li > button.run { color:brown; }
    list > li > button.del { color:#AAA; font-size:12px; }
    list > li:current { background:moccasin;}
    list > li > pre { width:*; height:*; flow:text; border-left:1px solid #BBB; border-right:1px solid #BBB; margin:0; background:window; padding:3px; overflow-x:hidden; }
    list > li:current > pre { behavior:textarea; cursor:text; overflow:scroll-indicator; min-height:4.8em; height:min-intrinsic; }
    list > li:last-child > button.del { visibility:hidden; }
      
    .list > caption  
    {
      white-space:nowrap;
      overflow-x:hidden;
      text-align:center;
      /*background: linear-gradient(top, threedlight, threedface/10%, threedlight/80%, threedshadow);*/
      background: url(theme:column-header-normal) stretch;
      padding:3px 0 5px 0;
      width:*;
    } 
  
  </style>
  <script type="text/tiscript">
  
    const logList = $(#log-list);
    const tagList = $(#tag-list);
    const rulesList = $(#rules-list);
    const propsList = $(#props-list);
    const attsList = $(#atts-list);

    const SUBSYSTEM = ["dom","csss","css","tis"];
    const SEVERITY = ["info","warning","error"];
    const RE_FILE_LINE = /[(](file:[^()]+[(](\d+)[)])[)]/g;

    var highlightedStack;
    var currentElementNo;
     
    // called by debug_frame::on_message() when log messages arrive
    function onLogMessage() 
    {
      function crackText(text)
      {
        text = text.replace("\t","    ").htmlEscape();
        var wrapFileLine = : str,g,n : "(<a href='" + (g /~ "(") + "' line=" + n + " >" + (g %~ "/") + "</a>)"; 
        return text.replace(RE_FILE_LINE, wrapFileLine);
      }
      function formatLogMessage(sev,subs,text)
      {
        return String.printf("<option class='%s %s'>%s</option>", SUBSYSTEM[subs],SEVERITY[sev],crackText(text));
      }
      var m;
      while(m = view.nextLogMessage())
        logList.append(formatLogMessage(m[1],m[0],m[2]));
      //view.update();
      if(logList.last)
        logList.last.post(::this.scrollToView(false,false));
    }
        
    // called by debug_frame::on_message() when current element changes
    function onElementChange()
    {
       highlightedStack = view.getHighlightedStack();
       var tags = tagList;
       tags.clear();
       function emit(sym,val) { return val? sym + val:"" }
       function emitclass(val) { 
         var r = "";
         if(val) for(var c1 in val.split(" ")) r += emit(".",c1);
         return r;
        }
       var lastn = 0;
       for(var (n,td) in highlightedStack)
       {
         lastn = n;
         tags.$append(<option value={n}>{td.tag}{emit("!",td.type)}{emit("#",td.id)}{emitclass(td.cls)}</option>);
       }
       tags.update();
       tags.value = lastn;
       showDetails(lastn);
    }
    
    // called by debug_frame::on_message() when new document was loaded in the host view
    function onDocumentAtached()
    {
    
    }
    
    // called by debug_frame::on_message() when new document was loaded in the host view
    function onDocumentDetached()
    {
      tagList.clear();
      logList.clear();
      rulesList.clear();
      propsList.clear();
      attsList.clear();
      currentElementNo = undefined;
    }

    self.onControlEvent = function(evt)
    {
       if(evt.type == (Event.HYPERLINK_CLICK | Event.SINKING))
       {
         var path = evt.target.attributes["href"].substr(7).replace("/","\\");
         var line = evt.target.attributes["line"];
         var notepad = System.home("notepad2/notepad2.exe").replace("/","\\");
         var cmd = String.$("{notepad}" /g {line} "{path}"); 
         view.run(cmd);
         return true;
       }
    };
    
    function showDetails(n)
    {
      currentElementNo = n;
      showRules(view.styleRulesOfStackElement(n));
      showProps(view.usedStylePropsOfStackElement(n));
      showAtts(view.statesAndAttributesOfStackElement(n));
    }
    
    tagList.onValueChanged = function()
    {
      var n = this.value;
      view.highlightStackElement(n);
      showDetails(n);
    };
         
    
    function showRules(rules)
    {
      var list = rulesList;
      var caption = list.first;
      list.clear();
      list.append(caption);
     
      for(var rule in rules)
      {
        if(rule.type == "style-rule")
        {
          var fn = (rule.file %~ "/") || rule.file;
          list.$append(<header>{rule.selector} <a href='{rule.file}' line={rule.lineNo} >{fn}({rule.lineNo})</a></header>); 
        }
        else if(rule.type == "inline-style")
          list.$append(<header>@style:</header>); 
        else if(rule.type == "runtime-style")
          list.$append(<header>runtime style:</header>); 
        var props = rule.properties;  
        var props_names = [];  
        for(var name in props) props_names.push(name);
        props_names.sort();
        for(var name in props_names)
          list.$append(<dt>{name}:</dt><dd>{props[name]}</dd>);
      }
    }
    function showProps(props)
    {
      var list = propsList;
      var caption = list.first;
      list.clear();
      list.append(caption);
      var props_names = [];  
      for(var name in props) props_names.push(name);
      props_names.sort();
      for(var name in props_names)
        list.$append(<dt>{name}:</dt><dd>{props[name]}</dd>);
    }
    
    const STATES = {
      "link":Element.STATE_LINK,
      "hover":Element.STATE_HOVER,
      "active":Element.STATE_ACTIVE,
      "visited":Element.STATE_VISITED,
      "focus":Element.STATE_FOCUS,
      "tab-focus":Element.STATE_TAB_FOCUS,
      "current":Element.STATE_CURRENT,
      "checked":Element.STATE_CHECKED,
      "disabled":Element.STATE_DISABLED,
      "read-only":Element.STATE_READONLY,
      "expanded":Element.STATE_EXPANDED,
      "collapsed":Element.STATE_COLLAPSED,
      "incomplete":Element.STATE_INCOMPLETE,
      "animating":Element.STATE_ANIMATING,
      "focusable":Element.STATE_FOCUSABLE,
      "anchor":Element.STATE_ANCHOR,
      "popup":Element.STATE_POPUP,
      "owns-popup":Element.STATE_OWNS_POPUP,
      "empty":Element.STATE_EMPTY,
      "busy":Element.STATE_BUSY,
      "moving":Element.STATE_MOVING,
      "copying":Element.STATE_COPYING,
      "drop-target":Element.STATE_DROP_TARGET,
      "drag-over":Element.STATE_DRAG_OVER,
      "rtl":Element.STATE_IS_RTL,
      "ltr":Element.STATE_IS_LTR
    };
    
    function showAtts(attsAndStates)
    {
      var list = attsList;
      var caption = list.first;
      list.clear();
      list.append(caption);
      
      list.$append(<header>attributes:</header>); 
      for(var (name,val) in attsAndStates.attributes)
        list.$append(<dt>{name}:</dt><dd>{val}</dd>);
      
      list.$append(<header>states:</header>); 
      var stateBits = attsAndStates.states;
      for(var (name,bit) in STATES)
        if( (stateBits & bit) != 0)
          list.$append(<dt></dt><dd>:{name}</dd>);
    }
    
    class TagLabel : Behavior
    {
      function attached() { this.paintBackground = this.paint; }
          
      function getShape()
      {
        var shape = this.shape;
        if(!shape) 
        {
          shape = this.shape = new Graphics.Path();
          this.shapeWidth = null;
          this.shapeHeight = null;
        }
       
        var (x1,y1,x2,y2) = this.box(#rect,#border);
        var w = (x2-x1);
        var h = (y2-y1);
       
        if( this.shapeWidth == w && this.shapeHeight == h)
          return shape; // nothing to do already calculated

        this.shapeWidth = w;
        this.shapeHeight = h;
        
        shape.reset();
        var d = h / 6.0;
        
        x1 += 0.5; y1 += 0.5; x2 += 0.5; y2 += 0.5;
        
        if( this.index == 0 )
          shape.moveTo(x1,y1)
             .lineTo(x2-d,y1)
             .lineTo(x2+d,(y1+y2)/2)
             .lineTo(x2-d,y2)
             .lineTo(x1,y2)
             .close();
        else
          shape.moveTo(x1-d,y1)
             .lineTo(x2-d,y1)
             .lineTo(x2+d,(y1+y2)/2)
             .lineTo(x2-d,y2)
             .lineTo(x1-d,y2)
             .lineTo(x1+d,(y1+y2)/2)
             .close();

        return shape; 
      }      
      
      // function is called while handling WM_PAINT 
      function paint(gfx)
      {
        if(var shape = this.getShape())
        {
          gfx.lineWidth(1)
             .lineColor(color(128,128,128))
             .fillColor(color(this.style#background-color))
             .drawPath( shape );
          return true;
        }
      }
    }

    class SnippetList: Behavior
    {
      function attached()
      {
        Settings.add(this);
      }
      function onMouse(evt)
      {
         if(evt.type == (Event.MOUSE_DOWN | Event.SINKING) && 
           evt.target.$is(li>pre))
         {
           var li = evt.target.$p(li);
           li.state.current = true; 
           this.update();
         }
      }
      
      function onControlEvent(evt)
      {
        var li = null;
        if(evt.type == Event.BUTTON_CLICK)
        {
          li = evt.target.$p(li);
          if( evt.target.$is(button.run) )
          {
            var code = "(function(){" + li.$(pre).value + "\r\n}).call(this)";
            view.runHostScript(currentElementNo, code );
            if(typeof currentElementNo == #integer)
              showDetails(currentElementNo);
          }
          else if( evt.target.$is(button.del) )
          {
            li.remove();
            saveState();
          }
          return true;
        }
        else if(evt.type == Event.EDIT_VALUE_CHANGED)
        {
          saveState();
          var last = this.last.$(pre).value.trim();
          if(last.length && this.length < 100) // if last not empty and not more than 100 items - add new empty item.
            this.appendItem("");
          return true;
        }
      }

      function appendItem(txt)
      {
        this.$append(<li><button .run .light>4</button><pre>{txt}</pre><button .del .light>r</button></li>);
      }
      
      function store(data) 
      {
        var items = [];
        for(var pre in this.$$(li>pre))
        {
          var txt = pre.value.trim();
          if( txt ) items.push(txt);
        }
        data.snippets = items;
      }

      function restore(data) 
      {
        var items = data.snippets;
        if( !items || items.length == 0) 
          return;
        var caption = this.first;
        this.clear();
        this.append(caption);
        for( var txt in items)
          this.appendItem(txt);
        this.appendItem("");
      }
      
    }
   
    // persistable settings:
    namespace Settings
    {
      const path = System.path(#USER_APPDATA, "sciter-inspector.js");
      var   list = []; // list of persistable objects

      function store() 
      {
        var stream = Stream.openFile(path,"uw");
      
        if( !stream )
        {
          view.msgbox(#warning, "Cannot open file "+ path +" for writing. Settings will not be saved." );
          return;
        }
      
        var data = {};
        for(var persistable in list)
          persistable.store(data);

        stream.printf("%V\n",data);
        stream.close();
      }

      function restore() 
      {
        var stream = Stream.openFile(path,"ur");
        if( !stream )
          return false;
        var data = parseData( stream );
        stream.close();

        for(var persistable in list)
          persistable.restore(data);
      }

      function add(persistable) { list.push(persistable); }
    }

    // window position persistence
    Settings.add {
      store: function(data) 
        {
           var (x,y,w,h) = view.box(#rectw,#border,#screen);
           data.window = {left:x,top:y,width:w,height:h};  
        },
      restore: function(data) 
        {
           if( data.window )
             view.move(data.window.left,data.window.top,data.window.width,data.window.height); 
        }
    };
    
    function saveState()
    {
      self.timer(2000,Settings.store);
    }

    function self.ready() {
      Settings.restore();
      onLogMessage(); // check pending messages on startup
      view.onMove = :{saveState();return false};
      view.onSize = :{saveState();return false};
    }
  
  </script>
  </head>
<body>
  <frameset rows="*,*">
    <section #dom>
      <select #tag-list type=select>Use CTRL+SHIFT+CLICK to inspect element</select>
      <frameset cols="2*,2*,*">
        <dl #rules-list .list ><caption>Applied rules</caption></dl>
        <splitter/>
        <dl #props-list .list ><caption>Used style properties</caption></dl>
        <splitter/>
        <dl #atts-list .list><caption>States and attributes</caption></dl>
      </frameset>
    </section>
    <splitter/>
    <frameset cols="*,*">
      <list #con-list .list>
        <caption>Code snippets to run</caption>
        <li>
          <button .run .light>4</button>
          <pre>stdout.println(this); // shows current element</pre>
          <button .del .light>r</button>
        </li>
        <li>
          <button .run .light>4</button>
          <pre>this.attributes["foo"] = "bar";  // set attribute</pre>
          <button .del .light>r</button>
        </li>
        <li>
          <button .run .light>4</button>
          <pre>this.state.checked = true;       // set state on current element</pre>
          <button .del .light>r</button>
        </li>
        <li>
          <button .run .light>4</button>
          <pre>this.style#display = "none";     // set style on current element</pre>
          <button .del .light>r</button>
        </li>
        <li>
          <button .run .light>4</button>
          <pre></pre>
          <button .del .light>r</button>
        </li>
      </list>
      <splitter/>
      <select #log-list type=select .list><cpation>Log messages</caption></select>
    <frameset>
  </frameset>

</body>
</html>
