<html>
  <head>
    <meta name="generator" content="h-smile:richtext"/>
  </head>
<body>
  <h1>View object</h1>
  <p>Represents window where this script is runnung.</p>
  <p><strong>view</strong> - current view object (of the running script) is accessible through gloabal <em>view</em> variable.</p>
  <table border="0" cellspacing="4" width="96%">
    <tr>
      <td><em>WINDOW_MINIMIZED</em><br/><em>WINDOW_MAXIMIZED</em><br/><em>WINDOW_HIDDEN</em></td>
      <td bgcolor="#fffff0" valign="top">Values of <em>view.state</em> property.</td></tr>
    <tr>
      <td colspan="2">
        <h2>Properties</h2></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><em>root</em></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">r - </font><em>Element</em>, root element of a document loaded into the view.</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><em>state</em></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">r/w</font> - state of the view's window. Applicable only for toplevel frame windows (sciter.exe).</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><em>focus</em></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">r/w</font> - <em>Element</em>, current element that has input focus. To set new element in focus use view.focus = el;</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><em>eventsRoot</em></td>
      <td bgcolor="#fffff0" valign="top">
        <div><font color="#999999">r/w</font> - <em>Element</em>, &quot;events root&quot; element. Used for implementation of &quot;modal document loops&quot;. If set then all UI events that are targeted to elements that are not descendants of the element will be rerouted to the element. Setting this element may cause current focus element to be changed. Here is typical modal document loop:</div>
        <pre><font face="Courier New">view.<u>eventsRoot</u> = dlg;
</font><font face="Courier New" color="#0033cc">while</font><font face="Courier New"> (dlg.isVisible) view.<u>doEvent</u>();
dlg.style#display = </font><font face="Courier New" color="#339933">"none"</font><font face="Courier New">;
view.<u>eventsRoot</u> = </font><font face="Courier New" color="#0033cc">null</font><font face="Courier New">;
</pre></font></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><em>sip</em></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">r/w</font> - show/hide SIP button of dialog. By default SIP button is hidden. (Windows Mobile Professional only!)</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><em>sipUp</em></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">r/w</font> - show/hide SIP of dialog (keyboard). By default SIP is hidden. (Windows Mobile Professional only!)</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><em>fullscreen</em></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">r/w</font> - make a window/dialog fullscreen. Note that menu visibility should be controlled via view.menu.visible. (Windows Mobile Professional only!)</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><em>menu</em></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">r</font> - returns an object of type Menu of the view. (Windows Mobile Professional only!)</td></tr>
    <tr>
      <td valign="top" colspan="2">
        <h2>Methods</h2></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><em><strike>this</strike></em></td>
      <td bgcolor="#fffff0" valign="middle">(non-constructable)</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>load</em></strong></td>
      <td bgcolor="#fffff0" valign="middle">
        <div><strong>(</strong><em>url</em>:string[, <em>now</em>: bool]<strong>)</strong> : true/false</div>
        <p>Method loads new document (replaces current one) in the current view from the given <em>url</em>. If <em>now</em> is equal to <em>true</em> this method loads document synchronously - method will return after document will be downloaded and loaded in the view.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>load</em></strong></td>
      <td bgcolor="#fffff0" valign="middle">
        <div><strong>(</strong><em>stream</em>:Stream<strong>)</strong> : true/false</div>
        <p>Method loads new document (replaces current one) in the current view from the given in-memory <em>stream</em>.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>box</em></strong></td>
      <td bgcolor="#fffff0" valign="middle">
        <div><strong>( </strong><em>part</em> [, <em>edge</em> [, <em>relativeTo</em> ]] <strong>) </strong>returns: integer, device pixels</div>
        <p>Returns coordinates of the edges of the view. Parameters:</p>
        <ul>
          <li><strong>part</strong> - one of symbolic constants <strong>#left</strong>, <strong>#top</strong>, <strong>#right</strong>, <strong>#bottom</strong>, <strong>#width</strong> or <strong>#height</strong>. Defines part of box (rectangle) to return.</li>
          <li><strong>edge</strong>, one of view:</li>
          <ul>
            <li><strong>#border</strong> - border box edge - OS window border bounds,</li>
            <li><strong>#client</strong> - client area edge<em>,</em></li></ul>
          <li><strong>relativeTo</strong>, one of:</li>
          <ul>
            <li><strong>#screen</strong> - returns coordinate relative to the origin of the screen,</li>
            <li><strong>#self</strong>, <em>default value</em> - all coordinates are relative to the origin of the client area of the view.</li></ul></ul></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>move</em></strong></td>
      <td bgcolor="#fffff0" valign="middle">
        <div><strong>( </strong><em>x</em>:int, <em>y</em>:int [, <em>clientCoordinates</em>: true | false]<strong> ) </strong>:void</div>
        <p>Replaces window of the view (dialog or frame) on the screen. This method is applicable only for standalone Sciter.</p>
        <p>If <em>clientCoordinates</em> is <em>true</em> x and y are interpretted as a desired position of the client area on the screen.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>move</em></strong></td>
      <td bgcolor="#fffff0" valign="middle">
        <div><strong>( </strong><em>x</em>:int, <em>y</em>:int, <em>width</em>:int, <em>height</em>:int [, <em>clientCoordinates</em>: true | false] <strong>&nbsp;) </strong>:void</div>
        <p>Replaces window and changes dimension of the view (dialog or frame) on the screen. This method is applicable only for standalone Sciter.</p>
        <p>If <em>clientCoordinates</em> is <em>true</em> x,y, <em>width</em> and <em>height</em> are interpretted as a desired position/size of the client area on the screen.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>selectFile</em></strong></td>
      <td bgcolor="#fffff0" valign="middle">
        <div><strong>(</strong> <em>#save</em> | <em>#load</em>, <em>filter</em>:string , <em>ext</em>: string <strong>) </strong>: string | null</div>
        <p>Methods shows system file selector modal dialog and returns full path name of the selected file or null if user cancels this dialog.</p>
        <ul>
          <li>First parameter is either #save or #load symbol. If #save is provided then dialog will have a caption <em>Save As...</em> otherwise (#load) it will have caption <em>Open...</em></li>
          <li><em>filter</em> is a string - filter which defines list of allowed file extensions seprated by character '|' in the form: &quot;label1|file.ext1|label2|file.ext1|..&quot; where <em>label</em> is a label of item (appears in the selector on the dialog) and file.ext is a ';' seprated list of filename templates.</li>
          <li><em>ext</em> is a string - default file extension used if user will type filename without extension.</li></ul>
        <div>Following sample will popup dialog to select html files and will load file in current view:</div>
        <pre><font color="#0033cc">var</font> fn = view.<strong>selectFile</strong>(<font color="#0033cc">#open</font>,
       <font color="#009900">"HTML Files (*.htm,*.html)|*.HTM;*.HTML|All Files (*.*)|*.*"</font> , <font color="#009900">"html"</font> );
if( fn ) view.<strong>load</strong>(fn);
</pre></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>selectPrinter</em></strong></td>
      <td bgcolor="#fffff0" valign="middle">TBD</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>dialog</em></strong></td>
      <td bgcolor="#fffff0" valign="middle">
        <div><strong>( </strong><em>url</em>: string | <em>stream</em>: Stream [, <em>parameters</em>: any [, <em>position</em>: int = 5] ] <strong>&nbsp;) </strong>: <em>undefined</em> | value passed to <em>close</em> method.</div>
        <p>Shows modal dialog defined by document at <em>url</em> or contained in in-memory <em>stream</em>. &nbsp;object <em>parameters</em> if given will be copied to <em>view.parameters</em> variable available for scripts inside dialog HTML.</p>
        <p><em>position</em> is an integer in range [1..9], it defines position of the dialog window relative to the parent view window. For meaning of the values see NUMPAD on the keyboard, e.g. position 5 means center/middle of the dialog will be placed in the center/middle of the view.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>msgbox</em></strong></td>
      <td bgcolor="#fffff0" valign="middle">
        <div><strong>( </strong><em>type</em>:symbol,<strong> &nbsp;</strong><em>text</em>: string, [ <em>title</em>: string, [ <em>buttons</em> &nbsp;[, <em>onLoad</em>: function [, <em>onClose</em>: function ]]]] <strong>&nbsp;) </strong>: <em>undefined</em> | <em>symbol</em> of the button pressed to close dialog.</div>
        <ul>
          <li><em>type</em> - symbol, one of the following values: <strong>#alert</strong>, <strong>#information</strong>, <strong>#question</strong> or <strong>#warning</strong> ;</li>
          <li><em>text</em> - string, either plain text or html ;</li>
          <li><em>title</em> - string, caption of the dialog window;</li>
          <li><em>buttons</em> - button definition(s), either:</li>
          <ul>
            <li>one of the symbols: <strong>#ok</strong>, <strong>#cancel</strong>, <strong>#abort</strong>, <strong>#ignore</strong>, <strong>#yes</strong>, <strong>#no</strong> or <strong>#close</strong>, or</li>
            <li>object with the structure <font face="Courier New">{ id:#somesymbol, text:&quot;Some Text&quot; }</font> or</li>
            <li>array of symbols or objects above;</li></ul>
          <li><em>onClose</em> - function with the signature <code>function(id, root)</code> returning <em>true</em>|<em>false.</em> This function will be called on attempt to close dialog with parameters <em>id</em> - id of the button pressed and <em>root</em> - root node of the HTML document of the dialog. Function shall return true if dialog can be closed at the moment.</li>
          <li><em>onLoad</em> - function with the signature <code>function(root)</code><em>.</em> This function will be called after creating dialog window. Use it if you need to do some initialization, e.g. fill data of input fields if <em>text</em> is an html containing &lt;input&gt;s.</li></ul>
        <div>Samples:</div>
        <ol>
          <li><code>view.msgbox(#information, &quot;I am fine!&quot;);</code> - will show simple message; &nbsp;</li>
          <li><code>view.msgbox(#question, &quot;Be or not to be?&quot;, &quot;Huh?&quot;, <br/>[ {id:#yes, text:&quot;To be&quot;}, {id:#no, text:&quot;Not to be&quot;} ] );</code></li></ol>
        <div></div></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>close</em></strong></td>
      <td bgcolor="#fffff0" valign="middle">
        <div><strong>( </strong>[<em>retval</em>: any]<strong> ) </strong>: undefined</div>
        <p>closes current view (or dialog if it is view of dialog window). <em>retval</em> is any scripting object - return value of the <em>dialog</em>() function.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>doEvent</em></strong></td>
      <td bgcolor="#fffff0" valign="middle">
        <div><strong>( </strong>[<em>#wait</em> | <em>#nowait</em> | <em>#all</em>]<strong> )</strong> : undefined</div>
        <p>Passes control to the operating system. Control is returned after the operating system has finished processing next event in its event queue. This method is used for implementing modal document loops.</p>
        <p>In case of:</p>
        <ul>
          <li><strong>#wait</strong> - waits for the next event in the UI message queue, default behavior.</li>
          <li><strong>#nowait</strong> - if there is any event in message queue handles it and returns immediately if there no any messages;</li>
          <li><strong>#all</strong> - executes all pending messeages in the message queue. Returns immediately if there no any messages;</li></ul></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>update</em></strong></td>
      <td bgcolor="#fffff0" valign="middle">
        <div><strong>()</strong> : undefined</div>
        <p>Executes all pending changes in the view and renders what was changed on the screen. After this call box coordinates of all DOM elements are valid.</p>
        <p>Use this method when you need to commit all updates made on the DOM to the moment. For example:</p>
        <pre>function retrieveDataFromDB(recordSet)
{
while(!recordSet.EOF())
{
  grid.appendRow(recordSet.row);
  if(++numRowsAdded > 10)
  {
     numRowsAdded = 0;
     view.update();
  }
}
}
</pre></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>clipboard</em></strong></td>
      <td bgcolor="#fffff0" valign="middle">
        <div><strong>(</strong><em>callback</em>: function<strong>)</strong> : undefined</div>
        <p>Calls the <em>callback</em> function for each format of data presented in system clipboard at the moment. The callback function has following signature: <code>function ( </code><em><code>dataType</code></em><code>: symbol ) {...}</code>, where dataType is a symbol designating one of supported formats:</p>
        <dl>
          <dt><strong>#text</strong></dt>
          <dd>- text/plain, represented bys string</dd>
          <dt><strong>#html</strong></dt>
          <dd>- text/html, represented by string;</dd>
          <dt><strong>#picture</strong></dt>
          <dd>- bitmap image, represented by object of type Image;</dd>
          <dt><strong>#url</strong></dt>
          <dd>- url or link, represented by object of the following structure: &nbsp;<code>{ <em>url</em>: string , <em>caption</em>: string }</code>;</dd>
          <dt><strong>#json</strong></dt>
          <dd>- JSON data, represented as an object.</dd>
          <dt>returns integer - clipboard sequence number. Each change of clipboard buffer changes this number.</dt></dl></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>clipboard</em></strong></td>
      <td bgcolor="#fffff0" valign="middle">
        <div><strong>(#get</strong>, <em>dataType</em>: symbol<strong>)</strong> : string | object | Image;</div>
        <p>Fetches data from the clipboard in format defined by the dataType parameter. For list of allowed values see previous method definition.</p>
        <p>Note: for the <strong>#html</strong> format this function returns two values: source url (if any) and html data per se. <br/>To get both of them use this : <code>var (url, html) = view.clipboard(#get, #html);</code></p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>clipboard</em></strong></td>
      <td bgcolor="#fffff0" valign="middle">
        <div><strong>(#put</strong>, data: string | object | Image <strong>)</strong> : undefined;</div>
        <p>Stores data to the clipboard.</p></td></tr></table>
  <h2>View events</h2>
    <table border="0" cellpadding="4" cellspacing="0" width="100%">
      <tr>
        <td width="200" valign="top"><strong>view.onSize</strong>() : void</td>
        <td bgcolor="#fffff0" valign="top">This function is invoked by the engine after dimensions of the view (window) was changed. Use view.box() method to get dimensions.</td></tr>
      <tr>
        <td valign="top"><strong>view.onMove</strong>() : void</td>
        <td bgcolor="#fffff0" valign="top">Invoked by the engine after position of the view (window) was changed. Use view.box() method to get dimensions and positions.</td></tr>
      <tr>
        <td valign="top"><strong>view.onStateChanged</strong>()<br/>: void</td>
        <td bgcolor="#fffff0" valign="top">Invoked when state of the view (window) was changed. See <a>View</a><em>.state</em> property.</td></tr>
      <tr>
        <td valign="top"><strong>view.activated</strong>(mode): void</td>
        <td bgcolor="#fffff0" valign="top">The event is generated when Sciter window gets activated or deactivated. <em>mode</em> here takes the following values:
          <ul>
            <li><strong>false</strong> - window is deactivated;</li>
            <li><strong>true</strong> - window is activated somehow but not by mouse;</li>
            <li><strong>#by-mouse</strong> - window is activated by mouse click on it.</li></ul></td></tr></table>
</body>
</html>