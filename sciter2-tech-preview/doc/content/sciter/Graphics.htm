<html>
  <head>
    <meta name="source"/>
    <meta name="generator" content="h-smile:richtext"/>
  </head>
<body>
  <h1>Graphics, Path and Text objects</h1>
  <h2>Graphics object</h2>
  <p>Represents graphic surface of the element.</p>
  <p>Pretty much all methods return Graphic object itself allowing cascading of calls so following <font face="Courier New">gfx.lineWidth(2).line(0,0,100,100)</font>will draw 2px line from (0,0) to (100,100).</p>
  <table border="0" cellspacing="8" width="100%">
    <tr>
      <td colspan="3" valign="top">
        <h3><strong><font size="5">Constants</font></strong></h3></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right">
        <div><strong><em>JOIN_MITER</em></strong></div>
        <div><strong><em>JOIN_ROUND</em></strong></div>
        <div><strong><em>JOIN_BEVEL</em></strong></div></td>
      <td colspan="2" bgcolor="#fffff0" valign="top">Join types, values of <em>lineJoin</em> property</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right">
        <div><strong><em>CAP_BUTT</em></strong></div>
        <div><strong><em>CAP_SQUARE</em></strong></div>
        <div><strong><em>CAP_ROUND</em></strong></div></td>
      <td colspan="2" bgcolor="#fffff0" valign="top">Line cap type, values of <em>lineCap</em> property</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right">
        <div><strong><em>ALIGN_START</em></strong></div>
        <div><strong><em>ALIGN_END</em></strong></div>
        <div><strong><em>ALIGN_CENTER</em></strong></div></td>
      <td colspan="2" bgcolor="#fffff0" valign="top">text alignment type, parameter values of <em>Text.Alignment</em> function</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right">
        <div><strong><em>BLEND_ALPHA</em></strong></div>
        <div><strong><em>BLEND_CLEAR</em></strong></div>
        <div><strong><em>BLEND_SRC</em></strong></div>
        <div><strong><em>BLEND_DST</em></strong></div>
        <div><strong><em>BLEND_SRCOVER</em></strong></div>
        <div><strong><em>BLEND_DSTOVER</em></strong></div>
        <div><strong><em>BLEND_SRCIN</em></strong></div>
        <div><strong><em>BLEND_DSTIN</em></strong></div>
        <div><strong><em>BLEND_SRCOUT</em></strong></div>
        <div><strong><em>BLEND_DSTOUT</em></strong></div>
        <div><strong><em>BLEND_SRCATOP</em></strong></div>
        <div><strong><em>BLEND_DSTATOP</em></strong></div>
        <div><strong><em>BLEND_XOR</em></strong></div>
        <div><strong><em>BLEND_ADD</em></strong></div>
        <div><strong><em>BLEND_SUB</em></strong></div>
        <div><strong><em>BLEND_MULTIPLY</em></strong></div>
        <div><strong><em>BLEND_SCREEN</em></strong></div>
        <div><strong><em>BLEND_OVERLAY</em></strong></div>
        <div><strong><em>BLEND_DARKEN</em></strong></div>
        <div><strong><em>BLEND_LIGHTEN</em></strong></div>
        <div><strong><em>BLEND_COLORDODGE</em></strong></div>
        <div><strong><em>BLEND_COLORBURN</em></strong></div>
        <div><strong><em>BLEND_HARDLIGHT</em></strong></div>
        <div><strong><em>BLEND_SOFTLIGHT</em></strong></div>
        <div><strong><em>BLEND_DIFFERENCE</em></strong></div>
        <div><strong><em>BLEND_EXCLUSION</em></strong></div>
        <div><strong><em>BLEND_CONTRAST</em></strong></div></td>
      <td colspan="2" bgcolor="#fffff0" valign="top">blending type, values of <em>blendMode</em> and <em>imageBlendMode </em>properties</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right">
        <div><strong><em>FILL_ONLY</em></strong></div>
        <div><strong><em>STROKE_ONLY</em></strong></div>
        <div><strong><em>STROKE_AND_FILL</em></strong></div>
        <div><strong><em>FILL_BY_LINE_COLOR</em></strong></div></td>
      <td colspan="2" bgcolor="#fffff0" valign="top"><em>drawPath</em> flags.</td></tr>
    <tr>
      <td colspan="3">
        <h3>Properties</h3></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>lineJoin</em></strong></td>
      <td colspan="2" bgcolor="#fffff0" valign="top">rw - <em>integer</em>, one of JOIN_xxx constants. Type of line join.</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>lineCap</em></strong></td>
      <td colspan="2" bgcolor="#fffff0" valign="top">rw - <em>integer</em>, one of CAP_xxx constants. Type of line cap.</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>blendMode</em></strong></td>
      <td colspan="2" bgcolor="#fffff0" valign="top">rw - <em>integer</em>, one of BLEND_xxx constants. Blend mode of drawing operations.</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>imageBlendMode</em></strong></td>
      <td colspan="2" bgcolor="#fffff0" valign="top">rw - <em>integer</em>, one of BLEND_xxx constants. Blend mode of image renderings.</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>imageBlendColor</em></strong></td>
      <td colspan="2" bgcolor="#fffff0" valign="top">rw - <em>integer</em>, color. Image blending color.</td></tr>
    <tr>
      <td colspan="3" valign="top">
        <h3>Static Methods</h3></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>RGBA</em></strong></td>
      <td colspan="2" bgcolor="#fffff0" valign="middle">
        <div>(<strong>red</strong><em>:integer</em> , <strong>green</strong><em>:integer</em>, <strong>blue</strong><em>:integer</em> [, <strong>alpha</strong><em>:integer|float (0.0 .. 1.0)</em>]) <em>:color</em> or<br/>(<strong>s</strong><em>:</em>string) <em>:color</em></div>
        <p>Returns color rgba value. Example: var c = Graphics.RGBA(0xff,0,0); - pure red color or Graphics.RGBA(&quot;red&quot;); or Graphics.RGBA(&quot;#ff0000&quot;);</p></td></tr>
    <tr>
      <td colspan="3" valign="top">
        <h3>Methods</h3></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strike><em>constructor</em></strike></td>
      <td colspan="2" bgcolor="#fffff0" valign="middle">(non-creatable object)</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>clearAll</em></strong></td>
      <td bgcolor="#fff4ff" valign="middle">
        <div>( [color: color] ): Graphics</div>
        <p>Clears the graphics.</p></td>
      <td bgcolor="#fff4ff" valign="middle"></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>line</em></strong></td>
      <td bgcolor="#fff4ff" valign="middle">
        <div>( <strong>x1</strong>:<em>float</em>, <strong>y1</strong>:<em>float</em>, <strong>x2</strong>:<em>float</em>, <strong>y2</strong>:<em>float</em> ) : Graphics</div>
        <p>Draws line from x1,y1 to x2,y2 using current lineColor and lineGradient.</p></td>
      <td rowspan="9" bgcolor="#fff4ff" valign="middle">Shapes and Lines</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>triangle</em></strong></td>
      <td bgcolor="#fff4ff" valign="middle">
        <div>( x1:<em>float</em>, y1:<em>float</em>, x2:<em>float</em>, y2:<em>float</em>, x3:<em>float</em>, y3:<em>float</em> ) : Graphics</div>
        <p>Draws triangle using current lineColor/lineGradient and fillColor/fillGradient.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>rectangle</em></strong></td>
      <td bgcolor="#fff4ff" valign="middle">
        <div>( x:<em>float</em>, y:<em>float</em>, w:<em>float</em>, h:<em>float</em> ) or</div>
        <div>( x:<em>float</em>, y:<em>float</em>, w:<em>float</em>, h:<em>float</em>, r:<em>float</em> ) or</div>
        <div>( x:<em>float</em>, y:<em>float</em>, w:<em>float</em>, h:<em>float</em>, rx:<em>float</em>, ry:<em>float</em> ) or</div>
        <div>( x:<em>float</em>, y:<em>float</em>, w:<em>float</em>, h:<em>float</em>, rx_top:<em>float</em>, ry_top:<em>float</em>, rx_bottom:<em>float</em>, ry_bottom:<em>float</em> ) : Graphics</div>
        <p>Draws rectangle using current lineColor/lineGradient and fillColor/fillGradient with (optional) rounded corners.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>ellipse</em></strong></td>
      <td bgcolor="#fff4ff" valign="middle">
        <div>( x1:<em>float</em>, y1:<em>float</em>, r:<em>float</em> ) : Graphics or</div>
        <div>( x1:<em>float</em>, y1:<em>float</em>, rx:<em>float</em>, ry:<em>float</em> ) : Graphics</div>
        <p>Draws circle or ellipse using current lineColor/lineGradient and fillColor/fillGradient.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>arc</em></strong></td>
      <td bgcolor="#fff4ff" valign="middle">
        <div>( x1:<em>float</em>, y1:<em>float</em>, rx:<em>float</em>, ry:<em>float</em>, startAngle:<em>float</em>, endAngle:<em>float</em> ) : Graphics</div>
        <p>Draws closed arc using current lineColor/lineGradient and fillColor/fillGradient.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>star</em></strong></td>
      <td bgcolor="#fff4ff" valign="middle">
        <div>( x1:<em>float</em>, y1:<em>float</em>, r1:<em>float</em>, r2:<em>float</em>, startAngle:<em>float</em>, numRays:<em>integer</em> ) : Graphics</div>
        <p>Draws star using current lineColor/lineGradient and fillColor/fillGradient.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>polygon</em></strong></td>
      <td bgcolor="#fff4ff" valign="middle">
        <div>( x1:<em>float</em>, y1:<em>float</em>, x2:<em>float</em>, y2:<em>float</em>, .... ) : Graphics or</div>
        <div>( v1:array, v2:<em>array</em>, .... ) : Graphics</div>
        <p>Draws polygon using current lineColor/lineGradient and fillColor/fillGradient.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><em><strong>pointInPolygon</strong></em></td>
      <td bgcolor="#fff4ff" valign="middle">
        <div>( x:<em>float</em>, y:<em>float, </em>polyX1:<em>float</em>, polyY1:<em>float</em>, polyX2:<em>float</em>, polyY2:<em>float</em>, ....<em> </em>&nbsp;): <em>true</em> | <em>false</em> or</div>
        <div>( x:<em>float</em>, y:<em>float, </em>polygon:<em>array</em> ): <em>true</em> | <em>false</em></div>
        <p>Checks if point (x,y) is inside the polygon.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>polyline</em></strong></td>
      <td bgcolor="#fff4ff" valign="middle">
        <div>( x1:<em>float</em>, y1:<em>float</em>, x2:<em>float</em>, y2:<em>float</em>, .... ) : Graphics or</div>
        <div>( v1:array, v2:<em>array</em>, .... ) : Graphics</div>
        <p>Draws polyline (multi-segment line) using current lineColor/lineGradient and fillColor/fillGradient.</p></td></tr>
    <tr>
      <td valign="top" align="right"><strong><em>drawPath</em></strong></td>
      <td bgcolor="#fffff0" valign="middle">
        <div>( path: Graphics.Path ) : Graphics</div>
        <p>Draws the path object using current fill and stroke brushes.</p></td>
      <td bgcolor="#fffff0" valign="middle">
        <div></div>
        <div>Path primitives</div>
        <div></div></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>copyImage</em></strong></td>
      <td bgcolor="#f3faed" valign="middle">
        <div>( img:<a href="Image.htm">Image</a> , x:<em>float</em>, y:<em>float</em> [, xIimg:<em>integer</em>, yImg:<em>integer, </em>wIimg:<em>integer</em>, hImg:<em>integer</em> ] ) : Graphics</div>
        <p>Does bit-blit of the image pixels onto the graphics surface. No transformation applied to the image.</p></td>
      <td rowspan="3" bgcolor="#f3faed" valign="middle">Image rendering</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>blendImage</em></strong></td>
      <td bgcolor="#f3faed" valign="middle">
        <div>( img:<a href="Image.htm">Image</a> , x:<em>float</em>, y:<em>float</em> [, xIimg:<em>integer</em>, yImg:<em>integer, </em>wIimg:<em>integer</em>, hImg:<em>integer</em> ] [, alpha: float | integer] ) : Graphics</div>
        <p>Blends <em>img</em> onto the graphics surface. Operation takes in account per pixel alpha of the imeage and optional <em>alpha</em> value. alpha here is either float [ 0.0 .. 1.0 ] or integer [ 0 .. 255 ].</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>drawImage</em></strong></td>
      <td bgcolor="#f3faed" valign="middle">
        <div>( img:<a href="Image.htm">Image</a> , x:<em>float</em>, y:<em>float</em> [, w:<em>float</em>, h:<em>float</em>]<em> </em>[, xIimg:<em>integer</em>, yImg:<em>integer, </em>wIimg:<em>integer</em>, hImg:<em>integer</em> ] ) : Graphics</div>
        <p>Draws <em>img</em> onto the graphics surface with current transformation applied (scale, rotation).</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>lineWidth</em></strong></td>
      <td bgcolor="#fffae6" valign="middle">
        <div>( width: float ) : Graphics</div>
        <p>Set line width for subsequent drawings.</p></td>
      <td rowspan="9" bgcolor="#fffae6" valign="middle">Line/Outline <br/>and Fill<br/>attributes</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>lineColor</em></strong></td>
      <td bgcolor="#fffae6" valign="middle">
        <div>( color: color ) : Graphics</div>
        <p>Set line color for subsequent drawing operations.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>noLine</em></strong></td>
      <td bgcolor="#fffae6" valign="middle">
        <div>() : Graphics</div>
        <p>Disables line (outline) drawing.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>fillColor</em></strong></td>
      <td bgcolor="#fffae6" valign="middle">
        <div>( color: color ) : Graphics</div>
        <p>Set color for solid fills.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>lineLinearGradient</em></strong></td>
      <td bgcolor="#fffae6" valign="middle">
        <div>( x1: float, y1: float, x2: float, y2: float, color1: rgba, color2: rgba [, p: float] ) : Graphics</div>
        <p>Setup parameters of gradient linear of lines.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>fillLinearGradient</em></strong></td>
      <td bgcolor="#fffae6" valign="middle">
        <div>( x1: float, y1: float, x2: float, y2: float, color1: rgba, color2: rgba [, p: float] ) : Graphics</div>
        <p>Setup parameters of gradient linear fills.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>lineRadialGradient</em></strong></td>
      <td bgcolor="#fffae6" valign="middle">
        <div>( x1: float, y1: float, r: float, color1: rgba, color2: rgba [, p: float] ) : Graphics</div>
        <p>Setup parameters of gradient radial drawing of lines.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>fillRadialGradient</em></strong></td>
      <td bgcolor="#fffae6" valign="middle">
        <div>( x1: float, y1: float, r: float, color1: rgba, color2: rgba [, p: float] ) : Graphics</div>
        <p>Setup parameters of gradient radial fills.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>noFill</em></strong></td>
      <td bgcolor="#fffae6" valign="middle">
        <div>( ) : Graphics</div>
        <p>Disables fills for subsequent drawing operations.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>rotate</em></strong></td>
      <td bgcolor="#fff4ff" valign="middle">
        <div>( radians: float ) : Graphics</div>
        <p>Rotate coordinate system on <em>radians</em> angle.</p></td>
      <td rowspan="8" bgcolor="#fff4ff" valign="middle">Affine<br/>transformations</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><em><strong>scale</strong></em></td>
      <td bgcolor="#fff4ff" valign="middle">
        <div>( xsc: float, ysc: float ) : Graphics</div>
        <p>Scale coordinate system. <code>xsc</code> is the scale factor in the horizontal direction and <code>ysc</code> is the scale factor in the vertical direction. Both parameters must be positive numbers. Values smaller than <code>1.0</code> reduce the unit size and values larger than <code>1.0</code> increase the unit size.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>translate</em></strong></td>
      <td bgcolor="#fff4ff" valign="middle">
        <div>( x: float, y: float ) : Graphics</div>
        <p>Move origin of coordinate system to the (x,y) point.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>skew</em></strong></td>
      <td bgcolor="#fff4ff" valign="middle">
        <div>( sx: float, sy: float ) : Graphics</div>
        <div></div>
        <div>Setup skewing (shearing) transformation.</div></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><em><strong>screenToWorld</strong></em></td>
      <td bgcolor="#fff4ff" valign="middle">
        <div>(r: number) : float</div></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><em><strong>screenToWorld</strong></em></td>
      <td bgcolor="#fff4ff" valign="middle">
        <div>(x: number, y: number) : (float, float)</div>
        <p>These two functions translate coordinates from screen coordinate system to the one defined by rotate(),scale(), translate() and/or skew().</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>worldToScreen</em></strong></td>
      <td bgcolor="#fff4ff" valign="middle">
        <div>(r: number) : float</div></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>worldToScreen</em></strong></td>
      <td bgcolor="#fff4ff" valign="middle">
        <div>x: number, y: number) : (float, float)</div>
        <p>These two functions translate coordinates from coordinate system defined by rotate(),scale(), translate() and/or skew() to screen coordinate system.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>drawText</em></strong></td>
      <td bgcolor="#f4fff4" valign="middle">
        <div>( text: <em>Graphics.Text</em>, x: float, y: float [, clr: color] [, pointOf: integer] ) : Graphics</div>
        <p>Renders text layout object (see below) at position (x,y) with optional parameters:</p>
        <ul>
          <li>clr - color, if provided it is used to render the text. If no color is given then current fill an stroke brushes are used to render text with outlines.</li>
          <li>pointOf - number in the range 1..9, defines what part of text layout corresponds to point (x,y). For meaning of numbers see numeric pad on keyboard. &nbsp;Example:<br/> &nbsp;<code>gfx.drawText(text, 100,100, 5);</code> - text will drawn with its center loacated at (100,100) point.<br/>By default pointOf=7 is used - x,y are coordinates of top/left corner of the text.</li></ul></td>
      <td rowspan="2" bgcolor="#f4fff4" valign="middle">Text output</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>fonts</em></strong></td>
      <td bgcolor="#f4fff4" valign="middle">
        <div>( [template:string] ) : array of strings, class method (a.k.a. static method).</div>
        <p>Returns array of strings - list of installed font names. <em>template</em> if defined is a template for font name. E.g. Graphics.fonts(&quot;Arial*&quot;) may return array like [&quot;Arial&quot;, &quot;Arial Black&quot;, &quot;Arial Narrow&quot;] on your OS.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>save</em></strong></td>
      <td bgcolor="#f0ffff" valign="middle">
        <div>( ) : Graphics</div>
        <p>Saves current Graphics attributes on top of internal state stack.</p></td>
      <td rowspan="2" bgcolor="#f0ffff" valign="middle">State</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>restore</em></strong></td>
      <td bgcolor="#f0ffff" valign="middle">
        <div>( ): Graphics</div>
        <p>Restores Graphics attributes from top of internal state stack.</p></td></tr></table>
    <h2>Graphics.Path object</h2>
    <table border="0" cellspacing="8" width="100%">
      <tr>
        <td valign="top" align="right"><strong><em>this</em></strong></td>
        <td bgcolor="#fffff0" valign="middle">
          <div>( ) : Graphics</div>
          <p>Constructor, starts new path. Use as <code>var path = new Graphics.Path();</code> &nbsp;to construct new path object.</p></td></tr>
      <tr>
        <td valign="top" align="right"><strong><em>moveTo</em></strong></td>
        <td bgcolor="#fffff0" valign="middle">
          <div>( x:<em>float</em>, y:<em>float </em>[, relative <em>= false</em> ] ) : Graphics.Path</div>
          <p>Moves current drawing path position to x,y. If <em>relative</em> is <em>true</em> then <em>x</em> and <em>y</em> are interpreted as deltas from the current path position.</p></td></tr>
      <tr>
        <td valign="top" align="right"><strong><em>lineTo</em></strong></td>
        <td bgcolor="#fffff0" valign="middle">
          <div>( x:<em>float</em>, y:<em>float </em>[, relative <em>= false</em> ] ) : Graphics.Path</div>
          <p>Draws line and moves current drawing path position to x,y. If <em>relative</em> is <em>true</em> then <em>x</em> and <em>y</em> are interpreted as deltas from the current path position.</p></td></tr>
      <tr>
        <td valign="top" align="right"><strong><em>hlineTo</em></strong></td>
        <td bgcolor="#fffff0" valign="middle">
          <div>( x:<em>float </em>[, relative <em>= false</em> ] ) : Graphics.Path</div>
          <p>Draws horizontal line and moves current drawing path position to x, (current)y. If <em>relative</em> is <em>true</em> then <em>x</em> is interpreted as a delta from the current path position.</p></td></tr>
      <tr>
        <td valign="top" align="right"><strong><em>vlineTo</em></strong></td>
        <td bgcolor="#fffff0" valign="middle">
          <div>( y:<em>float </em>[, relative <em>= false</em> ] ) : Graphics.Path</div>
          <p>Draws vertical line and moves current drawing path position to (current)x, y. If <em>relative</em> is <em>true</em> then <em>y</em> is interpreted as a delta from the current path position.</p></td></tr>
      <tr>
        <td valign="top" align="right"><strong><em>arcTo</em></strong></td>
        <td bgcolor="#fffff0" valign="middle">
          <div>( x:<em>float</em>, y:<em>float,</em> angle:<em>float, </em>rx:<em>float</em>, ry:<em>float, </em>largeArc:<em>bool, </em>sweep: <em>bool </em>[, relative <em>= false</em> ] ) : Graphics.Path</div>
          <p>(tbd)</p></td></tr>
      <tr>
        <td valign="top" align="right"><strong><em>ellipseTo</em></strong></td>
        <td bgcolor="#fffff0" valign="middle">
          <div>( x:<em>float</em>, y:<em>float, </em>rx:<em>float</em>, ry:<em>float, </em>[, clockwise <em>= true</em> ] ) : Graphics.Path</div>
          <p>(tbd)</p></td></tr>
      <tr>
        <td valign="top" align="right"><strong><em>quadraticCurveTo</em></strong></td>
        <td bgcolor="#fffff0" valign="middle">
          <div>( xc:<em>float</em>, yc:<em>float</em> , x:<em>float</em>, y:<em>float</em> [, relative <em>= false</em> ] ) : Graphics.Path</div>
          <p>(tbd)</p></td></tr>
      <tr>
        <td valign="top" align="right"><strong><em>bezierCurveTo</em></strong></td>
        <td bgcolor="#fffff0" valign="middle">
          <div>( xc1:<em>float</em>, yc1:<em>float</em> , xc2:<em>float</em>, yc2:<em>float, </em>x:<em>float</em>, y:<em>float</em> [, relative <em>= false</em> ] ) : Graphics.Path</div>
          <p>(tbd)</p></td></tr>
      <tr>
        <td valign="top" align="right"><strong><em>close</em></strong></td>
        <td bgcolor="#fffff0" valign="middle">
          <div>( &nbsp;) : Graphics.Path</div>
          <p>closes current path/figure.</p></td></tr>
      <tr>
        <td bgcolor="#ffffff" valign="top" align="right"><strong><em>fillEvenOdd</em></strong></td>
        <td bgcolor="#fffae6" valign="middle">
          <div>( even: true|false ) : Graphics.Path</div>
          <p>Set even/odd rule for polygon fills.</p></td></tr>
      <tr>
        <td bgcolor="#ffffff" valign="top" align="right"><strong><em>isPointInside</em></strong></td>
        <td bgcolor="#fffae6" valign="middle">
          <div>( x: float, y: float ) : true | false</div>
          <p>Tests if point (x,y) is inside the path</p></td></tr></table>
    <h2>Graphics.Text object</h2>
    <p>Represents text layout object to be rendered on graphics.</p>
    <p>All length metrics of the Text are in DIPs - device independent pixels (1/96 of inch).</p>
    <table border="0" cellspacing="8" width="100%">
      <tr>
        <td colspan="2">
          <h3>Properties</h3></td></tr>
      <tr>
        <td bgcolor="#ffffff" valign="top" align="right"><strong><em>lines</em></strong></td>
        <td bgcolor="#fffff0" valign="top">r - reports number of lines in text layout. To get meaningful values you should set width of the text layout object first like <code>text.width(100);</code></td></tr>
      <tr>
        <td colspan="2" valign="top">
          <h3>Methods</h3></td></tr>
      <tr>
        <td bgcolor="#ffffff" valign="top" align="right"><em>this</em></td>
        <td bgcolor="#f4fff4" valign="middle">
          <div>(str: <em>string</em> [, styleSource: <em>Element</em>])</div>
          <p>Constructs Text object from a string. &nbsp;When <em>styleSource</em> is provided it is used for assigning initial style (font,alignment, etc) to the text.</p></td></tr>
      <tr>
        <td bgcolor="#ffffff" valign="top" align="right"><strong><em>font</em></strong></td>
        <td bgcolor="#f4fff4" valign="middle">
          <div>( name: <em>string</em>, size: <em>float</em>, [ bold: <em>true|false</em>, [ italic: <em>true|false</em>]] ) : Graphics.Text</div>
          <p>Defines font attributes of this Text object.</p></td></tr>
      <tr>
        <td bgcolor="#ffffff" valign="top" align="right"><strong><em>width</em></strong></td>
        <td bgcolor="#f4fff4" valign="middle">
          <div>( ) : ( maxWidth:<em>float</em>, minWidth:<em>float</em> )</div>
          <p>Returns maximal and minimal widths of the text.</p>
          <p>Maximal width is the width of the text without wrapping. If the text contains new line [sequences] then function returns width of widest string. And minimal width is a width of widest word (non-breakable sequence) in the text.</p></td></tr>
      <tr>
        <td bgcolor="#ffffff" valign="top" align="right"><strong><em>width</em></strong></td>
        <td bgcolor="#f4fff4" valign="middle">
          <div>( w:float ) : Graphics.Text</div>
          <p>Sets width of the layout object. After width is set all dependent attributes (height, lines) can be retrieved.</p></td></tr>
      <tr>
        <td bgcolor="#ffffff" valign="top" align="right"><strong><em>height</em></strong></td>
        <td bgcolor="#f4fff4" valign="middle">
          <div>( ) : float</div>
          <div>Returns computed height of the Text object.</div></td></tr>
      <tr>
        <td bgcolor="#ffffff" valign="top" align="right"><strong><em>line</em></strong></td>
        <td bgcolor="#f4fff4" valign="middle">
          <div>(linNo: <em>integer</em>) : ( y: <em>float</em>, height: <em>float</em>, baselineOffset: float, length:<em>integer</em> )</div>
          <p>Returns metrics of particular line in text layout object:</p>
          <ul>
            <li>y - distance the line from the start of the text;</li>
            <li>height - height of the line;</li>
            <li>baselineOffset - offset of the baseline from y value of the line;</li>
            <li>length - number of characters (UTF16 code units to be precise) in this line including new line sequence if there is any.</li></ul></td></tr>
      <tr>
        <td bgcolor="#ffffff" valign="top" align="right"><strong><em>alignment</em></strong></td>
        <td bgcolor="#f4fff4" valign="middle">
          <div>( textAlignment: ALIGN_*** ) : Graphics.Text</div>
          <p>Sets text alignment of the text object.</p></td></tr>
      <tr>
        <td bgcolor="#ffffff" valign="top" align="right"><strong><em>alignment</em></strong></td>
        <td bgcolor="#f4fff4" valign="middle">
          <div>( ) : ALIGN_*** </div>
          <p>Returns text alignment of the text object.</p></td></tr></table>
  <div>TBD.</div>
</body>
</html>