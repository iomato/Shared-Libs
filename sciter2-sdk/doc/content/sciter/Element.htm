<html>
  <head>
    <meta name="generator" content="h-smile:richtext"/>
  </head>
<body>
  <h1>Element object</h1>
  <p>Represents DOM element. Element has sub-objects: <a href="Attributes.htm">attributes</a> and styles.</p>
  <p>The Element class is derived from the Node class.</p>
  <table border="0" cellspacing="4" width="100%">
    <tr>
      <td colspan="2" valign="top">
        <h2>Constants</h2></td></tr>
    <tr>
      <td width="144" bgcolor="#ffffff" valign="top" align="right">
        <div><em>STATE_LINK</em></div>
        <div><em>STATE_HOVER</em></div>
        <div><em>STATE_ACTIVE</em></div>
        <div><em>STATE_FOCUS</em></div>
        <div><em>STATE_VISITED</em></div>
        <div><em>STATE_CURRENT</em></div>
        <div><em>STATE_CHECKED</em></div>
        <div><em>STATE_DISABLED</em></div>
        <div><em>STATE_READONLY</em></div>
        <div><em>STATE_EXPANDED</em></div>
        <div><em>STATE_COLLAPSED</em></div>
        <div><em>STATE_INCOMPLETE</em></div>
        <div><em>STATE_ANIMATING</em></div>
        <div><em>STATE_FOCUSABLE</em></div>
        <div><em>STATE_ANCHOR</em></div>
        <div><em>STATE_POPUP</em></div>
        <div><em>STATE_OWNS_POPUP</em></div>
        <div><em>STATE_EMPTY</em></div>
        <div><em>STATE_BUSY</em></div></td>
      <td width="85%" bgcolor="#fffff0" valign="top">State flags (bits) of the element, used by get/setState functions. TBD.</td></tr>
    <tr>
      <td colspan="2">
        <h2>Properties</h2></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><em>length</em></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">r</font> - <em>integer</em>, number of child elements in this element. Read-only property.</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>[index]</em></strong></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">rw - </font><em>Element</em>, child element of the element at the <em>index</em> position, Read-write index accessor. Zero-based index.</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>root</em></strong></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">r</font> - <em>Element</em>, root element of the DOM this element belongs to. Read-only.</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>parent</em></strong></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">r - </font><em>Element</em>, parent element of given element or <em>null</em> if this element is a root element. Read-only.</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>index</em></strong></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">r</font> - Integer, index of the element in parent collection. Undefined if this element is not connected to any parent.</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>tag</em></strong></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">r</font> - <em>String</em>, tag name of the element. Read-only.</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>id</em></strong></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">r - </font><em>String</em>, value of attribute <em>id</em> (if any). Read-only.</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>next</em></strong></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">r - </font><em>Element</em>, next sibling element of the element or <em>null</em> if this is last element in the parent collection.</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>prior</em></strong></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">r</font> - <em>Element</em>, previous sibling element of the element or <em>null</em> if this is first element in the parent collection.</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>first</em></strong></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">r</font> - <em>Element</em>, first child (element) of the element or <em>null</em> if there are no children.</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>last</em></strong></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">r</font> - <em>Element</em>, last child (element) of the element or <em>null</em> if there are no children.</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em><u>attributes</u></em></strong></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">c - </font><a href="Attributes.htm"><em>Attributes</em></a>, collection of html attributes of the element.</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em><u>@</u></em></strong></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">c -</font> short form to access<font color="#999999"> </font><a href="Attributes.htm"><em>Attributes</em></a>, collection of html attributes of the element. It is just an alias of the <em>attributes</em> above.<br/>Sample:<br/><code>this.@[&quot;selected&quot;] = true</code> // or<br/><code>this.@#selected = true</code><br/>is an equivalent of <br/><code>this.attributes[&quot;selected&quot;] = true</code></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em><u>style</u></em></strong></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">c - </font><a href="Style.htm">Style</a>, style attributes of the DOM element.</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em><u>state</u></em></strong></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">c - </font><a href="States.htm">States</a>, collection of states (runtime flags) of the DOM element.</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><u>x</u></strong></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">c - </font>Extenders, interface to collection of native behaviors attached to the element:
        <ul>
          <li>element.x.length - reports number of native behaviors attached to the element;</li>
          <li>element.x[n] - reports name of n-th native behavior attached to the element.</li>
          <li>element.x.<em>funcname(....)</em> - call of methods implemented by native behaviors.</li></ul>
        <p>Main purpose of this interface is to provide function call mechanism that is using separate namespace.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>text</em></strong></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">rw</font> - <em>String</em>, text of the element. For compound elements this property returns plain-text version of the content</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>html</em></strong></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">rw</font> - <em>String</em>, (<em>inner HTML</em>) html source of the content of the element. Text returned (String) will not include head and tail tags of the element. Value to set can be either String or Stream object.</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>outerHtml</em></strong></td>
      <td bgcolor="#fffff0" valign="top">
        <div><font color="#999999">rw - </font><em>String</em>, (<em>outer HTML</em>) html source of the element. Text returned (String) will include head and tail tags of the element.</div>
        <div>Value to set can be either String or Stream object.</div></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>value</em></strong></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">rw - </font><em>String</em> by default and if the element has native behavior attached to the element it could be also: integer, boolean, array, etc. For example &lt;input type=&quot;radio&quot;&gt; will return <em>true</em> if this radio button has &quot;on&quot; state.
        <p>Note: <code>property value(v)</code> can be overriden in a behavior class in script. To access native value in such case use <em>Element.state.value</em> property.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>prototype</em></strong></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">rw - </font>Either Instance of Behavior or Element class object. Prototype can be set to the element through CSS (prototype:name_of_global_behavior_variable) or using this property.</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>isVisible</em></strong></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">r</font> - <em>true </em>if element and all its containers are in visible state - no visibility:hidden or display:none defined for them. false - otherwise.</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>isEnabled</em></strong></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">r</font> - <em>true </em>if element and all its containers are not in :disabled state ( setState(Element.STATE_DISABLED)).</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>ns</em></strong></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">r</font> - <em>Object</em>, namespace object of the element. All static functions and classes defined in scripts of current document are members of this [namespace] object.</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><em><strong>rows</strong></em></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">r</font> - <em>integer</em>, Number of rows in the DOM element, for the &lt;table&gt; element returns number of rows in it, for other returns number of rows with respect of <em>flow</em> CSS property.</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><em><strong>columns</strong></em></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">r</font> - <em>integer</em>, Number of columns in the DOM element, for the &lt;table&gt; element returns number of columns in it, for other returns number of rocolumns with respect of <em>flow</em> CSS property.</td></tr>
    <tr>
      <td colspan="2" bgcolor="#ffffff" valign="top">
        <h3>properties inherited from Node class or Node specific properties</h3></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>nodeIndex</em></strong></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">r</font> - Integer, index of the node in parent nodes collection.</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>nextNode</em></strong></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">r - </font><em>Element or Node</em>, next sibling node of the node or <em>null</em> if this is the last element in parent collection.</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>priorNode</em></strong></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">r</font> - <em>Element or Node</em>, previous sibling node of the node or <em>null</em> if this is the first node in it's parent's collection.</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>firstNode</em></strong></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">r</font> - <em>Element or Node</em>, reference to first child node (element,text,comment) of the element.</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>lastNode</em></strong></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">r</font> - <em>Element or Node</em>, reference to last child node (element,text,comment) of the element.</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>isElement</em></strong></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">r</font> - <em>true </em>if this node is an element, false - otherwise.</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>isText</em></strong></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">r</font> - <em>true </em>if the node is a text node.</td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>isComment</em></strong></td>
      <td bgcolor="#fffff0" valign="top"><font color="#999999">r</font> - <em>true </em>if the node is a comment node.</td></tr>
    <tr>
      <td colspan="2" valign="top">
        <h2>Enumeration</h2></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><em>for ... in</em></td>
      <td bgcolor="#fffff0">
        <div>for(var<strong> node</strong> in<strong> element</strong>)<strong> { </strong>/* loop body */<strong> }</strong></div>
        <p>Executes body of the loop for all child nodes of the element. Value of <em>node</em> variable is either text or element object.</p>
        <p>Example, for <em>p</em> element in html: <br/>&lt;p&gt;Hello &lt;em&gt;wonderfull&lt;/em&gt; world&lt;/p&gt;<br/>loop will be executed three times and <em>node</em> variable will be equal to: <font color="#336600">&quot;Hello &quot;</font>, Element(&quot;em&quot;) and <font color="#336600">&quot; world&quot;</font> on correspondent iteration.</p></td></tr>
    <tr>
      <td colspan="2" valign="top">
        <h2>Methods</h2></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><em>this</em></td>
      <td bgcolor="#fffff0">
        <div><strong>(tagname[, text])</strong></div>
        <p>Constructs new Element object with tag equal to <em>tagname</em> (string or symbol). Use it as:</p>
        <pre>var el = new Element(&quot;option&quot;); // or
var el = new Element(#option);
</pre>
        <p>Element will be created in disconnected state. To connect it to the DOM use <em>insert </em>method of the parent element.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>create</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>(object)</strong> : <em>Element</em></div>
        <p>Static constructor of DOM elements. <em>object</em> here is an object literal with <a href="#object-template">microformat</a> defined below.</p>
        <p>Example, following fragment is an equivalent of creating element with the markup <code>&lt;p&gt;before &lt;button&gt;Hi!&lt;/button&gt; after&lt;/p&gt;</code>:</p>
        <pre>var para = Element.create { p, &quot;paragraph text&quot; }; // or if text is a variable:
var para = Element.create { p, [paragraphText] };
</pre></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>clear</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>()</strong> : <em>undefined</em></div>
        <p>Clears a content of the element, removing all its children.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>toString</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>()</strong> : <em>string</em></div>
        <p>Returns string - html representation of the element. Text returned is outer html - includes head and tail tags and content s equal to text returned by &nbsp;<em>html</em> attribute.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>clone</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>() </strong>:<em>Element</em></div>
        <p>Returns new copy of the element. Method performs a deep copy of the element. New element is disconnected from the DOM state. Use insert() method to include it in the DOM.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right">
        <div><strong><em>select</em></strong></div>
        <div></div></td>
      <td bgcolor="#fffff0">
        <div><strong>(CSSselector</strong>:string<strong> [, argument1 [, argument2, ... ]])</strong> : <em>Element</em></div>
        <p>Returns first element satisfying CSS selector (<em>CSSselector</em>, string). CSSSelector may contain format specifiers like %d, %s which will be substituted by values of <em>argument1</em> ... <em>argumentN</em> in final CSS selector string. Function uses the same rules as does Stream.printf function.</p>
        <p>Example, if document contains <code>&lt;input type=&quot;text&quot;/&gt;</code> element then following statement</p>
        <pre>var inp = self.select(&quot;input[type='text']&quot;);
</pre>
        <p>will set <em>inp</em> by reference to such element.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right">
        <div><strong><em>$</em></strong></div></td>
      <td bgcolor="#fffff0">
        <div><strong>( </strong><em>CSSselector</em><strong> )</strong> : <em>Element</em></div>
        <p>Returns first element satisfying CSS selector.</p>
        <p>Note: this is a &quot;stringizer&quot; method so CSS selector can &nbsp;be written without &quot;&quot; quotes.</p>
        <p>Example, if document contains <code>&lt;input type=&quot;text&quot;/&gt;</code> elements then following statement</p>
        <pre>var inp = self.$( input[type='text'] );
</pre>
        <p>will set <em><code>inp</code></em> by reference to such element.</p>
        <p>And the following fragment:</p>
        <pre>var n = 3;
var li3 = self.$( ul &gt; li:nth-child({n}) );
</pre>
        <p>will find third list item in ul list element.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right">
        <div><strong><em>select</em></strong></div></td>
      <td bgcolor="#fffff0">
        <div><strong>(func , CSSselector</strong>: string<strong> [, argument1 [, argument2, ... ]])</strong> returns: <em>integer</em></div>
        <p>Calls <em>func</em> (function reference) for each element satisfying (matching) <em>CSSselector.</em> Function <em>func</em> shall accept one parameter where select will provide reference to matched element. Function may return <em>true</em> to stop enumeration.</p>
        <p>Example, following fragment will print out names of all input elements in the document: <br/>function printel(el) { &nbsp;stdout.println( el.attributes[<font color="#336600">&quot;name&quot;</font>] ); &nbsp;}<br/>document.select(printel, &quot;input&quot;);</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right">
        <div><strong><em>selectAll</em></strong></div></td>
      <td bgcolor="#fffff0">
        <div><strong>(CSSselector</strong>: string<strong> [, argument1 [, argument2, ... ]])</strong> returns: <em>Array</em></div>
        <p>Returns array of elements satisfying CSS selector (<em>CSSselector</em>, string). CSSSelector may contain format specifiers like %d, %s which will be substituted by values of <em>argument1</em> ... <em>argumentN</em> in final CSS selector string. Function uses the same rules as does Stream.printf function.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right">
        <div><strong><em>$$</em></strong></div></td>
      <td bgcolor="#fffff0">
        <div><strong>( </strong><em>CSSselector</em><strong> )</strong> returns: <em>Array</em></div>
        <p>Returns array of elements satisfying CSS selector (<em>CSSselector</em>, string).</p>
        <p>Note: this is a stringizer method - the <em>CSSselector</em> provided literally.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right">
        <div><strong><em>selectParent</em></strong></div></td>
      <td bgcolor="#fffff0">
        <div><strong>(CSSselector</strong>: string<strong> [, argument1 [, argument2, ... ]])</strong> returns: <em>Element</em></div>
        <p>Returns first element in child/parent chain satisfying CSS selector (<em>CSSselector</em>, string). CSSSelector may contain format specifiers like %d, %s which will be substituted by values of <em>argument1</em> ... <em>argumentN</em> in final CSS selector string. Function uses the same rules as does Stream.printf function.</p>
        <p>ATTN: Function also inspects <em>this</em> element.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right">
        <div><strong><em>$p</em></strong></div></td>
      <td bgcolor="#fffff0">
        <div><strong>( </strong><em>CSSselector</em><strong> )</strong> returns: <em>Element</em></div>
        <p>Returns first element in child/parent chain satisfying CSS selector.</p>
        <p>Note 1: this is a stringizer method - the <em>CSSselector</em> provided literally.</p>
        <p>Note 2: Function also inspects <em>this</em> element.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right">
        <div><strong><em>selectParent</em></strong></div></td>
      <td bgcolor="#fffff0">
        <div><strong>(func , CSSselector</strong>: string<strong> [, argument1 [, argument2, ... ]])</strong> returns: <em>integer</em></div>
        <p>Calls <em>func</em> (function reference) for each element satisfying (matching) <em>CSSselector.</em> Function <em>func</em> shall accept one parameter where select will provide reference to matched element. Function may return <em>true</em> to stop enumeration.</p>
        <p>Example, following fragment will print out ids of all parent divs of some element:</p>
        <pre>function printel(el) {  stdout.println( el.attributes[<font color="#336600">&quot;id&quot;</font>] );  }
some.selectParent(printel, &quot;div&quot;);
</pre>
        <p>Note: Function also inspects <em>this</em> element.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right">
        <div><strong><em>$$p</em></strong></div></td>
      <td bgcolor="#fffff0">
        <div><strong>( </strong><em>CSSselector</em><strong> )</strong> returns: <em>Array of Element</em>s</div>
        <p>Returns array of references of elements in child/parent chain satisfying CSS selector.</p>
        <p>Note 1: this is a stringizer method - the <em>CSSselector</em> provided literally.</p>
        <p>Note 2: Function also inspects <em>this</em> element.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>match</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>( CSSselector</strong>: string<strong> [, argument1 [, argument2, ... ]])</strong> returns: <em>true | false</em></div>
        <p>Checks if this DOM element satisfies given <em>CSSselector</em>.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>$is</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>( </strong><em>CSSselector</em><strong> )</strong> returns: <em>true | false</em></div>
        <p>Checks if this DOM element satisfies given <em>CSSselector</em>.</p>
        <p>Note: this is a stringizer method - the <em>CSSselector</em> provided literally.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>find</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>(x, y)</strong> returns: <em>Element</em>.</div>
        <p>Returns reference to the child of the given element at x,y coordinates relative to the origin of the element. If there is no such element method returns element itself.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>update</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>([deep])</strong> returns: undefined</div>
        <p>Remeasures given element (if deep == true) and invalidates its visual area after modifications. Use <strong>deep=true</strong> value if element will get new dimensions due to some operations on it. Omit <em>deep</em> parameter (or set it to <em>false</em>) if only decoration attributes (not changing dimensions, like color) were changed.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>update</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>(stateUpdateFunction)</strong> returns: undefined</div>
        <p>That is &quot;transactioned update&quot;. The <em>stateUpdateFunction </em>is called with <em>this</em> variable set to the element object and is expected to contain code that modifies state of the element, its content or states of its subelements.</p>
        <p>&quot;transactioned update&quot; mechanism is used when the element is expected to have &quot;content&quot; transitions defined in CSS as transition:blend(), scroll-***(), slide-***(), etc.</p>
        <p>The <code>Element.update(stateUpdateFunction)</code> does these steps:</p>
        <ol>
          <li>Makes snapshot of intial state of the element;</li>
          <li>Calls provided <code>stateUpdateFunction</code>() function that is expected to make all needed changes for the new state of the element;</li>
          <li>Makes final state snapshot;</li>
          <li>Starts the transitioning animation (if it is defined in CSS for the element) using these two snapshots.</li></ol>
        <p>If there is no CSS transition defined for the element then <code>stateUpdateFunction</code>() is called and view is updated to the new state of the element immediately.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>refresh</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>( </strong>[<strong>x</strong>,<strong> y</strong>,<strong> width</strong>,<strong> height</strong>]<strong> )</strong> returns: true|false</div>
        <p>Invalidates area of occupied by the element on the screen. If <em>x</em> , <em>y</em>, <em>width</em>, <em>height </em>(coordinates of area inside element) are provided then it invalidates only that portion. This method is useful if you are using Graphics for rendering on element surface area.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>animate</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>( nextStep</strong>: function[, <strong>duration</strong>: integer]<strong> )</strong> : undefined</div>
        <p>Starts animation on the element. <em>nextStep</em> is a function that executes animation step (changes dimension, opacity, etc.). This function is called with <em>this</em> set to the element itself and should return integer - number of milliseconds for the next step. If it returns zero or not an integer then animation stops.</p>
        <p>The <em>duration</em> is a duration of the animation in milliseconds. If it is provided then signature of the <em>nextStep</em> function is expected to be:<br/> <code>function nextStep(progress: float) {}</code> <br/>where progress is a float number from 0.0 to 1.0 - progress of the animation.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>box</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>( part</strong> [, <strong>edge</strong> [, <strong>relativeTo</strong> ]] <strong>) </strong>returns: integer, device pixels</div>
        <p>Returns coordinates of the edges of the element. Parameters:</p>
        <ul>
          <li><strong>part</strong> - one of symbolic constants <strong>#left</strong>, <strong>#top</strong>, <strong>#right</strong>, <strong>#bottom</strong>, <strong>#width</strong> or <strong>#height</strong>. Defines part of box (rectangle) to return.</li>
          <ul>
            <li>If <em>part</em> is <strong>#rect</strong> then the function returns four values - left, top, right, bottom. Use it for example as <code><br/>var (x1,y1,x2,y2) = this.box(#rect, #inner, #view)</code>;</li>
            <li>If <em>part</em> is <strong>#rect</strong>w then the function returns four values - left, top, width and height. Use it for example as <code><br/>var (x,y,w,h) = this.box(#rectw, #inner, #view)</code>;</li>
            <li>If part is <strong>#dimension</strong> the function returns two values - width and height. Use it as: <code><br/>var (w,h) = this.box(#dimension, #inner)</code>;</li>
            <li>If part is <strong>#position</strong> the function returns two values - left and top. Use it as: <code><br/>var (x,y) = this.box(#position, #inner, #view)</code>;</li></ul>
          <li><strong>edge</strong>, one of <a href="http://www.w3.org/TR/REC-CSS2/box.html">edges of element</a>:</li>
          <ul>
            <li><strong>#margin</strong> - margin box edge,</li>
            <li><strong>#border</strong> - border box edge,</li>
            <li><strong>#padding</strong> - padding box edge,</li>
            <li><strong>#inner</strong>, <em>default value</em> - inner box edge,</li>
            <li><strong>#content</strong> - content box edge. Content box here is outline of the content of the element and this is not &nbsp;an inner box of the element. E.g. content box can be bigger than inner box if the element has <em>overflow</em> attribute set<em>.</em></li>
            <li><strong>#client</strong> - client area, that is #inner box minus areas taken by [optional] scrollbars.</li>
            <li><strong>#icon</strong> -area covered by element's icon. Icon here is element's foreground image with foreground-repeat: no-repeat. If element has no such image the function returns <strong>#width</strong> and <strong>#height</strong> equals to zero.</li></ul>
          <li><strong>relativeTo</strong>, one of:</li>
          <ul>
            <li><strong>#screen</strong> - returns coordinate relative to the origin of the screen,</li>
            <li><strong>#root</strong> - returns coordinate relative to the origin of root element (view),</li>
            <li><strong>#parent</strong> - returns coordinate relative to the origin of its parent element. Note: parent scroll position relative.</li>
            <li><strong>#content</strong> - returns coordinate of the element in content of its parent. Note: is not dependent on parent scroll position.</li>
            <li><strong>#container</strong> - returns coordinate of the element relative to layout parent. Layout parent can be different from DOM parent element. E.g. position:absolute elements may have positioning layout parent different from DOM parent.</li>
            <li><strong>#self</strong>, <em>default value</em> - all coordinates are relative to the origin of inner box of the element.</li>
            <li><strong>#view</strong> - returns coordinate relative to the origin of the sciter window (view object).</li>
            <li>or if <em>relativeTo</em> equals one of the following values:</li>
            <ul>
              <li><strong>#margin</strong> - margin box edge,</li>
              <li><strong>#border</strong> - border box edge,</li>
              <li><strong>#padding</strong> - padding box edge,</li>
              <li><strong>#inner</strong> - inner box edge</li>
              <p>the function will return cumulative widths of correspondent parts, examples:</p>
              <p><code>var (mx1,my1,mx2,my2) = this.box(#rect, #margin, #inner)</code>;<br/>Each mx* value here will get sum of margin, border and padding in the left, top, right and bottom directions. In other words this call will return distances of margin box from inner(content) box of the element. And this call <code>var (mx1,my1,mx2,my2) = this.box(#rect, #margin, #border)</code>; will just return computed values of margin-left, margin-top, margin-right and margin-bottom CSS attributes.</p></ul></ul></ul>
        <p>For more information see the <em>CSS b</em><a name="box-model"><em>ox model</em></a> specification: <a href="http://www.w3.org/TR/CSS2/box.html">http://www.w3.org/TR/CSS2/box.html</a></p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>intrinsicWidthMin</em></strong></td>
      <td bgcolor="#fffff0">
        <div>( ) : integer, device pixels</div>
        <p>returns min-intrinsic width of the element. min-intrinsic width is minimal width needed to show element without horizontal scrollbar.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>intrinsicWidthMax</em></strong></td>
      <td bgcolor="#fffff0">
        <div>( ) : integer, device pixels</div>
        <p>returns max-intrinsic width of the element. max-intrinsic width is minimal width needed to show element without wrapping, e.g. for the &lt;p&gt; element this will be width of its text replaced in single line.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>intrinsicHeight</em></strong></td>
      <td bgcolor="#fffff0">
        <div>( <strong>forWidth</strong>: integer ) : integer, device pixels</div>
        <p>returns min-intrinsic height of the element for the given <em>forWidth</em>. min-intrinsic heigh is minimal height needed to show element without vertical scrollbar.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>toPixels</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>( length : </strong>length | string | symbol<strong> </strong>[, <strong>#width</strong> | <strong>#height</strong> ]<strong> ) :</strong> integer, device pixels</div>
        <p>returns the length value converted to the number of device pixels. Conversion is made in context of current element style so <code>el.toPixels( em(1.4) )</code> will number of pixel correspond to 1.4em that us dependent on current font size of the element.</p>
        <p>length is a string or symbol then this string is treated as a CSS length literal so it is possible to get values like: <code>el.toPixels(#xx-small)</code> &nbsp;or <code>el.toPixels(#system-scrollbar-width)</code>,</p>
        <p>Second symbol parameter is used with the conversion from perecentage lengths:<br/><code>var h50p = el.toPixels( pr(50.0), #height );</code> - will calculate the same value as the following CSS declaration: <code>height:50%</code>.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>scroll</em></strong></td>
      <td bgcolor="#fffff0"><img src="images/scroll.gif" align="right"/><strong>(part) </strong>returns: integer, device pixels
        <p>Returns various scrolling related positions of the element. Parameters:</p>
        <p><strong>part</strong> - one of symbolic constants:</p>
        <ul>
          <li><strong>#left</strong> - left position of the view relative to content origin,</li>
          <li><strong>#top</strong> - top position,</li>
          <li><strong>#right</strong> - offset of right edge of the view from right edge of &nbsp;the content box,</li>
          <li><strong>#bottom </strong>- offset of bottom edge of the view from bottom edge of the content box,</li>
          <li><strong>#width </strong>- width of scrollable area,</li>
          <li><strong>#height</strong> - height of scrollable area.</li></ul></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>scrollTo</em></strong></td>
      <td bgcolor="#fffff0">
        <div>( <strong>x</strong>:int, <strong>y</strong>:int [, <strong>smooth</strong>:bool] ) : void</div>
        <p>Sets scroll position of the element to x,y position. The element should have overflow: hidden-scroll, scroll or auto to be able to scroll its content.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>scrollToView</em></strong></td>
      <td bgcolor="#fffff0">
        <div>( [<strong>toTop</strong>:bool, <strong>smooth</strong>: bool = true ] )</div>
        <p>Scrolls the element to the view - ensures that element is visible. &nbsp;If <em>toTop</em> is <em>true </em>then forces element to be on top of its scrollable container. This method does deep scroll - it tries to make the element visible through all its scrollable containers. If <em>smooth</em> is false then no attempt to animate the scrolling will be made.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>insert</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>( element</strong> | <strong>html</strong> | <strong>object</strong> [,<strong>index</strong> = Integer.MAX]<strong>)</strong> returns: true | false.</div>
        <p><em>element</em> is a child DOM element (instance of this Element class) to be inserted at the <em>index</em> position. If index is greater than current number of children in this element then new element will be appended as a last element. <em>Index</em> is optional parameter, if ommited then element will be appended to collection. If <em>element</em> is already a child of some other parent then it will be disconnected from it automaticly.</p>
        <p>If first parameter is string (<em>html</em> text) then attempt will be made to insert it at given position.</p>
        <p>If first parameter is an object then it is considered as a template for creation of new DOM element. <a href="#object-template">Microformat</a> of that object is defined below.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>append</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>( element</strong> | <strong>html</strong> | <strong>object )</strong> returns: true | false.</div>
        <p>Equivalent of <code>insert ( ... , Integer.MAX )</code>;</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>prepend</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>( element</strong> | <strong>html</strong> | <strong>object )</strong> returns: true | false.</div>
        <p>Equivalent of <code>insert ( ... , 0 )</code>;</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>content</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>( element</strong> [, <strong>element</strong>2 [, <strong>element</strong>3, ... ]]<strong> )</strong> returns: true | false.</div>
        <p>Replaces content of the element by elements, that is short form of el.clear(); el.append(element1); el.append(element2); ...</p>
        <p><em>This method can be used for setting cells in &lt;tr&gt;s. It handles properly cells with col/rowspans.</em></p>
        <p>For all other elements <em>elementN</em> can be either DOM element, string or object - template of the element that uses <a href="#object-template">microformat</a>.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><em><strong>$content</strong></em></td>
      <td bgcolor="#fffff0">
        <div>( .. inline html .. ) : Element</div>
        <p>Stringizer method, replaces content of the element by the inline html. As this is a stringizer method then html can be provided as it is, example:</p>
        <pre>var el = ... , num = ...;
el.$content(This is item number <b>{ num }</b>);
</pre>
        <p>Method returns the element itself.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><em><strong>$append</strong></em></td>
      <td bgcolor="#fffff0">
        <div>( .. html .. ) : Element</div>
        <p>Stringizer method, adds content defined by the inline html to the end of the list of children of the element.</p>
        <p>Method returns first added element.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><em><strong>$prepend</strong></em></td>
      <td bgcolor="#fffff0">
        <div>( .. html .. ) : Element</div>
        <p>Stringizer method, insert content defined by the inline html at the start of children list of the element.</p>
        <p>Method returns first added element.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><em><strong>$after</strong></em></td>
      <td bgcolor="#fffff0">
        <div>( .. html .. ) : Element</div>
        <p>Stringizer method, adds content defined by the inline html to the parent of the element immediately after this one.</p>
        <p>Method returns first added element.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><em><strong>$before</strong></em></td>
      <td bgcolor="#fffff0">
        <div>( .. html .. ) : Element</div>
        <p>Stringizer method, insert content defined by the inline html to the parent of the element immediately before this one.</p>
        <p>Method returns <em>last</em> added element (that will be new <em>this.prior</em> element).</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><em><strong>$replace</strong></em></td>
      <td bgcolor="#fffff0">
        <div>( .. html .. ) : Element</div>
        <p>Stringizer method, removes this element from the DOM and content defined by the html in its place.</p>
        <p>Method returns first added element.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>detach</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>( ) </strong>: &nbsp;Element</div>
        <p>Removes this element from its parent's children collection so after call of this method this.<em>parent</em> become <em>null</em>. If update is true then calls update() for the parent element. Returns element that was just detached (this). This method does not destroy state and behaviors attached to the element until GC will not collect the element (if there are no references to it)</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>remove</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>( ) </strong>: &nbsp;Element</div>
        <p>Removes this element from its parent's children collection so after call of this method this.<em>parent</em> become <em>null</em>. If update is true then calls update() for the parent element. Returns element that was just detached (this). All runtime states and behaviors are destroyed by the method. Native behaviors will receive BEHAVIOR_DETACHED event.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>load</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>( url</strong>: string <strong>) </strong>returns: <em>true/false</em></div>
        <p>Loads content of the document referred by <em>url</em> as a content of this element. For elements having <em>behavior:frame</em> assigned it loads html, styles and executes scripts refered by the url or contained in the stream. Upon completion of loading behavior:frame posts DOCUMENT_COMPLETE event. For any other elements it loads only content of body portion of the document, no style loading or script execution happens in this case. If the <em>url</em> points on external resource like &quot;http://...&quot; then the method is asynchronous. Otherwise it tries to load the resource immediately.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>load</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>( stream</strong>: Stream<strong> ) </strong>returns: <em>true/false</em></div>
        <p>Loads content of the document from in-memory <em>stream</em> as a content of this element. For elements having <em>behavior:frame</em> assigned it loads html, styles and executes scripts refered by the url or contained in the stream. For any other elements it loads only content of body portion of the document, no style loading or script execution happens in this case.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>load</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>( html</strong>: string, <strong>url</strong>:string<strong> ) </strong>returns: <em>true/false</em></div>
        <p>Loads the <em>html</em> document from string as a content of this element. For elements having <em>behavior:frame</em> assigned it loads html, styles and executes scripts refered by the url or contained in the stream. For any other elements it loads only content of body portion of the document, no style loading or script execution happens in this case.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>loadImage</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>( url</strong>: string [, <strong>callback</strong>: function <strong>) </strong>returns: <em>Image | null</em></div>
        <p>Loads image from the url.<em> </em>If <em>callback</em> is ommited then the engine will try to load image sycnhronously otherwise (if <em>callback</em> is a function) engine will issue asynchronous request and will call this function upon arrival.</p>
        <p>Signature of the callback function is <font face="Courier New">function callback(image)</font> where <em>image</em> is an object of class Image or null in case of error.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>request</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>(</strong> <strong>callback</strong>: function | integer, <strong><em>#get</em> | <em>#post</em> | <em>#post-data</em> | <em>#put-data</em> |<em> #post-json</em></strong> <strong>|<em> #put-json | #delete</em></strong>, <strong>url</strong>: string [, <strong>params</strong>: object [, <strong>headers</strong>: object] ] <strong>) </strong>: Object | Stream | Bytes | Error</div>
        <p>Sends synchronous or asynchronous http data GET/POST request to the server/page (url), a.k.a. JSON-RPC calls.</p>
        <ul>
          <li><em>#get</em>, <em>#post, #post-data #json</em> are literal symbols - type of http request to be sent:</li>
          <ul>
            <li><em><strong>#get</strong></em> - sends plain HTTP GET request, url-encoded params (if any) are appended to the <em>url</em> to form the request;</li>
            <li><em><strong>#post</strong></em> - sends HTTP POST request with params serialized as <code>Content-Type: application/x-www-form-urlencoded;charset=utf-8</code>;</li>
            <li><strong><em>#post-data</em></strong> - sends HTTP POST request with params serialized as <code>Content-Type: multipart/form-data; boundary= ...</code>;</li>
            <li><strong><em>#put-data</em></strong> - sends HTTP PUT request with params serialized as <code>Content-Type: multipart/form-data; boundary= ...</code>;</li>
            <li><strong><em>#post-json</em></strong> - sends HTTP POST request with params serialized as JSON, &nbsp;<code>Content-Type: application/json;charset=utf-8</code>;</li>
            <li><strong><em>#put-json</em></strong> - sends HTTP PUT request with params serialized as JSON, <code>Content-Type: application/json;charset=utf-8</code>;</li>
            <li><strong><em>#delete</em></strong> - - sends HTTP DELETE request.</li></ul>
          <li><em>url</em> is a string - url of the page (location) on the server handling HTTP requests.</li>
          <li><em>params</em> is an object, its properties are serving role of parameters of HTTP request.</li>
          <li><em>headers</em> is an object - a map of additional header key/value pairs to send along with the request.</li>
          <li>returns: <em>true|false</em> for asynchronous requests or pair of (data:any,status:integer) - result of the request (see <em>data</em> below) and HTTP status code (e.g. 200 - OK, 404 - resource was not found on the server).</li></ul>
        <div>If parameter <em>callback</em> is an integer than it is treated as a timeout value (number of milliseconds) and the function executes <em>synchronous</em> request. If the callback is a function then response from the server will be delivered by calling the <em>callback</em> function having following signature:</div>
        <pre>function dataArrivedCallback( data: any, status: integer );
</pre>
        <p>where <em>data</em> is either one of:</p>
        <ul>
          <li><em>instanceof</em> <em>Error</em> object, in case of data response parsing problems;</li>
          <li><em>stream</em>, if data returned by the server is of textual type (text/plain, text/html, text/xml, etc.)</li>
          <li>instanceof Object, Array, etc. if response has content type text/javascript, text/ecmascript, text/tiscript or application/json and was successfully parsed into data object.</li>
          <li><em>Bytes</em>, if data returned by the server is of binary type (image/*, etc.). Bytes.type in this case will contain a string - mime-type of the data reported by the server.</li></ul>
        <p>and status code is an integer - HTTP status code (e.g. 200 - OK, 404 - resource was not found on the server) or if code is greater than 12000 it is a WinInet error code, see: <a href="http://support.microsoft.com/kb/193625">http://support.microsoft.com/kb/193625</a>.</p>
        <p>Example of server data response (type: text/javascript) :</p>
        <p><font face="Courier New">&nbsp;&nbsp;&nbsp;({ id : 1234, message : &quot;Hello from XYS server!&quot; })</font></p>
        <p>- in this case server returns object having two properties: id and message. Rationale behind of <font face="Courier New">({</font> and <font face="Courier New">})</font> was explained <a href="http://www.terrainformatica.com/index.php/?p=14">here</a>.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>getState</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>( </strong>[<strong>stateFlags</strong>:int]<strong> ) </strong>:int</div>
        <p>Returns state of the element. <em>stateFlags</em> here is a set of bits - &quot;ORed&quot; constants STATE_***. <em>stateFlags</em> is provided then function returns <em>int </em>- flags of the element ANDed with the provided <em>stateFlags</em> variable. If no <em>stateFlags</em> is given then the function returns full set of flags element has at hte moment.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>setState</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>( stateFlags</strong>:int<strong>) </strong>:void</div>
        <p>Function will set flags to the element update document on the screen accordingly (resolve styles and refresh).</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>clearState</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>( stateFlags</strong>:int<strong> ) </strong>:void</div>
        <p>Function will clear flags of the element and update document on the screen.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>capture</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>( onOff</strong>: true|false<strong> ) </strong>:void</div>
        <p>element.capture(<em>true</em>) - sets the mouse capture to the element and element.capture(<em>false</em>) - removes the mouse capture from the element.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>popup</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>( el</strong>: Element, <strong>placement</strong>: int<strong> )</strong> :void</div>
        <p>Function will show element <em>el</em> as a popup window placed relatively to <em>this</em> element. <em>Placement</em> accepts following values:</p>
        <ul>
          <li><em>2</em> - popup element below this element (anchor);</li>
          <li><em>8</em> - popup element above this element;</li>
          <li><em>4</em> - popup element on the left side of this element;</li>
          <li><em>6</em> - popup element on right side of this element;</li></ul>
        <div>( see keyboard numpad to get an idea of numbering).</div></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>popup</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>( el</strong>: Element, <strong>x</strong>:int, <strong>y</strong>:int ) :void</div>
        <p>Function will show element <em>el</em> as a popup window placed at x, y (view relative coordinates). <em>Placement</em> is '7'.</p>
        <div>( see keyboard numpad to get an idea of numbering).</div></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>closePopup</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>()</strong> :void</div>
        <p>Function will close popup if element <em>el</em> or any of its parent is a popup window.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>timer</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>(</strong> <strong>milliseconds</strong>: integer, <strong>callback</strong>: function <strong>)</strong></div>
        <p>If <em>milliseconds</em> is greater than zero the method will create timer for the DOM element with <em>milliseconds</em> delay.</p>
        <p>After <em>milliseconds</em> delay engine will call <em>callback</em> function with <em>this</em> variable set to the dom element. Return <em>true</em> from the <em>callback()</em> function if you need to continue timer ticks and <em>false</em> otherwise.</p>
        <p>Call of timer() with <em>milliseconds = 0</em> parameter will stop the timer.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>graphics</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>(</strong> [ <strong>color</strong>: integer | <strong>color</strong>: color[, <strong>forceInitialization</strong>:bool = true ]] <strong>)</strong> : <a href="Graphics.htm">Graphics</a></div>
        <p>Returns <a href="Graphics.htm">Graphics</a> object of the element. Graphics is a bitmap that has dimensions of the element therefore, once drawn, image will stay on the screen. Each invocation of the <em>graphics</em> method with color value will return that bitmap with all bits initialized with the <em>color</em> if <em>forceInitialization</em> is <em>true</em> or if graphics does not exist (first call of graphics()). Call of graphics() without parameters first time creates Graphics and initializes it with transparent color 0xFFFFFF, further calls returns created Graphics object and do nothing.</p>
        <p>To remove graphics from the element use <code>el.graphics(#destroy)</code> call.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>graphics</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>(</strong> <strong>#destroy</strong> <strong>)</strong> : <a href="Graphics.htm">Graphics</a> | null</div>
        <p>Removes graphics from the element.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>swap</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>(other</strong>: Element <strong>)</strong> : null</div>
        <p>Swaps DOM positions of two elements - owner of the method and the <em>other</em>. Returns element whose method is called.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>sendEvent</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>( eventCode</strong>:int<em> </em>[<em>, </em><strong>reason</strong><em>:</em> int<em> </em>[, <strong>owner</strong>: Element | null [, <strong>data</strong>:value ]]]<strong> )</strong> : true | false | value</div>
        <p>traverse (send) bubbling event to the parent/child chain of <em>this</em> element. Events generated by this method can be handled by <em>onControlEvent</em>() methods of elements in the chain.</p>
        <ul>
          <li><em>eventCode</em> is either one of constants from <em>Logical event codes from builtin behaviors </em>( see: <a href="Event.htm">Event</a> ) or any integer value above 0x1000 (custom control events range).</li>
          <li><em>reason</em> here is an arbitrary integer value that sender and receiver knows about.</li>
          <li><em>owner </em>is an optional reference to some DOM element. E.g. in MENU_ITEM_CLICK this is a reference to element - owner of popup menu or <em>null</em>.</li>
          <li><em>data</em> is any json value that will passed to BEHAVIOR_EVENT_PARAMS.data field (see: sdk/api/sciter-x-behavior.h file)</li></ul>
        <div>The <em>sendEvent</em> does traversal so it returns <em>true</em> if the event was consumed - one of <em>onControlEvent</em>() handlers in parent/child chain returned <em>true</em> while handling this event. If some element in child-parent chain consumes the event (returns true) and sets the <em>data</em> field the value of this updated data field will be returned from the sendEvent() function.</div></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>postEvent</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>( eventCode</strong>:int<em> </em>[<em>, </em><strong>reason</strong><em>:</em> int<em> </em>[, <strong>owner</strong>: Element | null [, <strong>data</strong>:value ]]]<strong> )</strong> : undefined</div>
        <p>The <em>postEvent</em> places event into the internal queue of posted events for future traversal by <em>sendEvent</em> and returns immediately.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>sendKeyEvent</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>( eventDef</strong>: object<strong> )</strong> : true | false | undefined</div>
        <p>The <em>sendKeyEvent</em> simulates the key event. eventDef may have following fields:</p>
        <pre>{
  type: Event.KEY_DOWN or Event.KEY_UP or Event.KEY_CHAR; // type if key event
  keyCode: int; // Key or char code, e.g. 'O'
  altKey: true or false; // optional, 'ALT' key pressed flag
  shiftKey: true or false; // optional, 'SHIFT' key pressed flag
  ctrlKey: true or false; // optional, 'CTRL' key pressed flag
}
</pre>
        <p>Function returns <em>true</em> if the event was consumed during sinking/bubbling dispatching of the event using <em>this</em> element as a target.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>sendMouseEvent</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>( eventDef</strong>: object<strong> )</strong> : true | false | undefined</div>
        <p>The <em>sendMouseEvent</em> simulates the mouse event. eventDef may have following fields:</p>
        <pre>{
  type: Event.KEY_DOWN or Event.KEY_UP or Event.KEY_CHAR, // type if key event
  altKey: true or false, // optional, 'ALT' key pressed flag
  shiftKey: true or false, // optional, 'SHIFT' key pressed flag
  ctrlKey: true or false, // optional, 'CTRL' key pressed flag
  mainButton: true or false, // optional, left mouse button pressed flag
  propButton: true or false, // optional, right mouse button pressed flag
  x: int, // x mouse coordinate, view relative
  y: int, // y mouse coordinate, view relative
}
</pre>
        <p>Function returns <em>true</em> if the event was consumed during sinking/bubbling dispatching of the event using <em>this</em> element as a target.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>post</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>( callback</strong>: function [,<strong>only_if_not_there</strong>:boolean]<strong> ) </strong>: undefined</div>
        <p>This method allows to delay execution of <em>callback</em> function. While calling the callback function engine will set <em>this</em> environment variable to the element this post call was invoked with.</p>
        <p>Optional parameter <strong>only_if_not_there</strong> if defined and is <em>true</em> allows to post delayed event only once. Multiple post with the same callback function will yield to a single entry in posted events queue.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>url</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>( </strong>[ <strong>relativeUrl</strong>: string ]<strong> )</strong> : string</div>
        <p>Method builds absolute url from the <em>relativeUrl</em> by using document url as a base. &nbsp;If there is no <em>relativeUrl</em> then the method just returns url of the document this DOM element belongs to.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>sort</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>( comparator</strong>: function<strong> </strong>[, <strong>fromIndex</strong>: integer [, <strong>numOfElements</strong>:integer]]<strong> &nbsp;)</strong> : void</div>
        <p>Sorts children of the element by using <em>comparator</em> function. <em>comparator</em> function has to have following signature:</p>
        <pre>function cmp(el1: Element, el2: Element) : int
</pre>
        <p>that returns negative int value if el1 is less than el2, 0 if they are equal and positive value if el1 is greater than el2.</p>
        <p><em>fromIndex</em> and <em>numOfElements</em> are used for defining range of elements to sort.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>move</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>( </strong>[<strong>x</strong>: int, <strong>y</strong>: int [, <strong>w</strong>: int, <strong>h</strong>: int] [, <strong>#view</strong> | <strong>#root</strong> | <strong>#screen</strong>]] <strong>)</strong> : void</div>
        <p>This methods transforms the element into the &quot;sprite&quot; - element that moves independently from the rest of the DOM:</p>
        <p>Declares element as having <em>position:popup</em> and moves it to the position (<em>x</em>,<em>y</em>). If the element happens to be outside of the view then engine creates special popup window for it. Third parameter describes role of x and y values. <em>w</em> and <em>h</em> parameters, if provided, change dimensions of the element.</p>
        <p>Samples are in sdk/samples/ideas/moveable-windows/ and sdk/samples/ideas/rect-tracker/ folders.</p>
        <p>Call of the <code>move()</code> without parameters restores default positioning of the element.</p>
        <p>See also: Element.style.dimension() method.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>textWidth</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>( text</strong>: string<strong> )</strong> : int</div>
        <p>Calculates width of the text with respect of current font defined for the element. If text contains multiple lines separated by &quot;\n&quot; character then it returns width of widest string.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>textHeight</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>( text</strong>: string<strong> )</strong> : int</div>
        <p>Calculates height of the text with respect of current font and line-height defined for the element. If text contains multiple lines separated by &quot;\n&quot; character then it returns sum of heights of all strings.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>subscribe</em></strong></td>
      <td bgcolor="#fffff0">
        <div><strong>(</strong> <strong>handler</strong>: function, <strong>eventGroup</strong> : int [, <strong>eventType</strong>: int] <strong>)</strong> : &lt;this element&gt;</div>
        <p>Assigns the <em>handler</em> function to the particular event that may occur on this particular DOM object.</p>
        <p><em>handler</em> function should have following signature function(<em>evt</em>) {...}, where evt is an Event object that describes the event in details.</p>
        <p><em>eventGroup</em> here is one of the following constants:</p>
        <ul>
          <li><code>Event.MOUSE</code> - group of mouse events (like Event.MOUSE_DOWN, Event.MOUSE_UP, etc. );</li>
          <li><code>Event.KEY</code> - group of keyboard events (like Event.KEY_DOWN, Event.KEY_UP, etc. );</li>
          <li><code>Event.BEHAVIOR_EVENT</code> - group of generated, synthetic events (a.k.a. control events like Event.BUTTON_CLICK, Event.HYPERLINK_CLICK, Event.BUTTON_STATE_CHANGED, etc. );</li>
          <li><code>Event.FOCUS</code> - group of scroll events;</li>
          <li><code>Event.SCROLL</code> - group of scroll events;</li>
          <li><code>Event.SIZE</code> - size changed event;</li></ul>
        <p><em>eventType</em> here is one of constants defined below for particular group of event. <em>eventType</em> parameter is optional - if it is not provided then the handler function will receive all events of the <em>eventGroup</em>.</p>
        <p>subscribe() method allows to attach multiple and independent event handling functions to single element.</p>
        <p>Note that subscribe() is not a substitution of <strong>onMouse</strong>(evt), <strong>onKey</strong>(evt), etc. event handlers defined below. These two ways of handling events work side-by-side. <strong>onXXXX</strong>() methods are used for defining event handlers in classes (Behaviors) so to handle events for classes of elements. And subscribe()/unsubscribe() are used for attaching event handlers to particular elements.</p>
        <p>Method returns the element it was called for. This allows to chain subscribe() calls.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><em><strong>unsubscribe</strong></em></td>
      <td bgcolor="#fffff0">
        <div>(<strong>handler</strong>: function) or</div>
        <div>(<strong>eventGroup</strong> : int [, <strong>eventType</strong>: int])</div>
        <p><em>unsubscribe</em>() method detaches event handler[s] from the element.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><em><strong>rowElements</strong></em></td>
      <td bgcolor="#fffff0">
        <div>(<strong>rowNo</strong>: integer) : array of Elements</div>
        <p>The function returns list (array) of elements that were replaced in given row.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><em><strong>columnElements</strong></em></td>
      <td bgcolor="#fffff0">
        <div>(<strong>colNo</strong>: integer) : array of Elements</div>
        <p>The function returns list (array) of elements that were replaced in given column.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><em><strong>rowY</strong></em></td>
      <td bgcolor="#fffff0">
        <div>(<strong>rowNo</strong>: integer) : (y: integer, height: integer)</div>
        <p>The function returns position and height of the row.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><em><strong>columnX</strong></em></td>
      <td bgcolor="#fffff0">
        <div>(<strong>colNo</strong>: integer) : (x: integer, width: integer)</div>
        <p>The function returns position and width of the column.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>removeRows</em></strong></td>
      <td bgcolor="#fffff0">
        <div>(<strong>rowNo</strong>: integer [, <strong>numRows</strong>: integer = 1])</div>
        <p>The function removes row(s). Applicable to the &lt;table&gt; element only. It properly handles cells with rowspans.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right"><strong><em>removeColumns</em></strong></td>
      <td bgcolor="#fffff0">
        <div>(<strong>colNo</strong>: integer [, <strong>numColumns</strong>: integer = 1])</div>
        <p>The function removes column(s). Applicable to the &lt;table&gt; element only. It properly handles cells with colspans.</p></td></tr>
    <tr>
      <td colspan="2" valign="top">
        <h2>Node specific methods</h2></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right">
        <div><strong><em>insertNodeBefore</em></strong></div>
        <div></div></td>
      <td bgcolor="#fffff0">
        <div><strong>( node: Node)</strong></div>
        <p>Inserts the node in the DOM tree before this element.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right">
        <div><strong><em>insertNodeAfter</em></strong></div>
        <div></div></td>
      <td bgcolor="#fffff0">
        <div><strong>( node: Node)</strong></div>
        <p>Inserts the node in the DOM tree after this element.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right">
        <div><strong><em>appendNode</em></strong></div></td>
      <td bgcolor="#fffff0"><strong>( node: Node)</strong>
        <p>Inserts the node after last node of this element so the node becomes last child node of the element.</p></td></tr>
    <tr>
      <td bgcolor="#ffffff" valign="top" align="right">
        <div><strong><em>prependNode</em></strong></div></td>
      <td bgcolor="#fffff0"><strong>( node: Node)</strong>
        <p>Inserts the node before first node of this element so the node becomes first child node of the element.</p></td></tr></table>
  <h2>Element events</h2>
  <table border="0" cellpadding="4" cellspacing="0" width="100%">
    <tr>
      <td width="200" valign="top">handler function name</td>
      <td width="210"><em>event.type</em> field</td>
      <td>Comment</td></tr>
    <tr>
      <td colspan="3">
        <h3>Sinking/Bubbling events:</h3></td></tr>
    <tr>
      <td rowspan="9" valign="top"><strong><em>onMouse</em></strong>(event) : true|false</td>
      <td bgcolor="#fffff0" valign="top">Event.MOUSE_ENTER</td>
      <td bgcolor="#fffff0">Mouse/Pointer enters the element.</td></tr>
    <tr>
      <td bgcolor="#fffff0" valign="top">Event.MOUSE_LEAVE</td>
      <td bgcolor="#fffff0">Mouse/Pointer leaves the element.</td></tr>
    <tr>
      <td bgcolor="#fffff0" valign="top">Event.MOUSE_MOVE</td>
      <td bgcolor="#fffff0">Mouse/Pointer moves over the element.</td></tr>
    <tr>
      <td bgcolor="#fffff0" valign="top">Event.MOUSE_DOWN</td>
      <td bgcolor="#fffff0">One of mouse buttons pressed in the element. <em>event.mainButton</em> and <em>event.</em>propButton will tell what button was pressed.</td></tr>
    <tr>
      <td bgcolor="#fffff0" valign="top">Event.MOUSE_UP</td>
      <td bgcolor="#fffff0">One of mouse buttons released in the element. <em>event.mainButton</em> and <em>event.</em>propButton will tell what button was pressed. <br/>To detect single MOUSE CLICK event use following condition:<br/><font face="Courier New" size="1">event.type == Event.MOUSE_UP &amp;&amp; this.getState(Element.STATE_PRESSED)</font></td></tr>
    <tr>
      <td bgcolor="#fffff0" valign="top">Event.MOUSE_DCLICK</td>
      <td bgcolor="#fffff0">Double mouse click in the element.</td></tr>
    <tr>
      <td bgcolor="#fffff0" valign="top">Event.MOUSE_WHEEL</td>
      <td bgcolor="#fffff0">Mouse wheel rotation. <em>event.wheelDelta</em> is a number of wheel ticks made.</td></tr>
    <tr>
      <td bgcolor="#fffff0" valign="top">Event.MOUSE_TICK</td>
      <td bgcolor="#fffff0">Repeatable event that is generated when one of mouse button pressed.</td></tr>
    <tr>
      <td bgcolor="#fffff0" valign="top">Event.MOUSE_IDLE</td>
      <td bgcolor="#fffff0">Pulsed event, is generated when mouse is not moving some short period of time. If it is not handled in the code then it is used by the engine to popup tooltip for the element.</td></tr>
    <tr>
      <td rowspan="3" valign="top"><strong><em>onKey</em></strong>(event) : true|false</td>
      <td bgcolor="#fffff0" valign="top">Event.KEY_DOWN</td>
      <td bgcolor="#fffff0">Keyboard key pressed. <em>event.keyCode</em> is virtual key code of the key.</td></tr>
    <tr>
      <td bgcolor="#fffff0" valign="top">Event.KEY_UP</td>
      <td bgcolor="#fffff0">Keyboard key released. <em>event.keyCode</em> is virtual key code of the key.</td></tr>
    <tr>
      <td bgcolor="#fffff0" valign="top">Event.KEY_CHAR</td>
      <td bgcolor="#fffff0">Character key pressed. <em>event.keyCode</em> is a value of UNICODE codepoint.</td></tr>
    <tr>
      <td rowspan="2" valign="top"><strong><em>onFocus</em></strong>(event) : true|false</td>
      <td bgcolor="#fffff0" valign="top">Event.GOT_FOCUS</td>
      <td bgcolor="#fffff0">Focusable element got input focus.</td></tr>
    <tr>
      <td bgcolor="#fffff0" valign="top">Event.LOST_FOCUS</td>
      <td bgcolor="#fffff0">Elements lost input focus.</td></tr>
    <tr>
      <td rowspan="16" valign="top">
        <div><strong><em>onControlEvent</em></strong>(event)<br/>:true|false</div>
        <div></div>
        <div>Synthetic (logical) events</div></td>
      <td bgcolor="#fffff0" valign="top">Event.BUTTON_CLICK</td>
      <td bgcolor="#fffff0" valign="top">Click on button, generated by behaviors: <em>button, checkbox, radio</em>.</td></tr>
    <tr>
      <td bgcolor="#fffff0" valign="top">Event.BUTTON_PRESS</td>
      <td bgcolor="#fffff0" valign="top">Mouse/Key pressed in button, generated by behaviors: <em>button, checkbox, radio</em>.</td></tr>
    <tr>
      <td bgcolor="#fffff0" valign="top">Event.BUTTON_STATE_CHANGED</td>
      <td bgcolor="#fffff0" valign="top">State (value) of button was changed, generated by behaviors: <em>checkbox, radio</em>.</td></tr>
    <tr>
      <td bgcolor="#fffff0" valign="top">Event.EDIT_VALUE_CHANGING</td>
      <td bgcolor="#fffff0" valign="top">Value of editbox is about to be changed, generated by behaviors: <em>edit, number, decimal, date, masked</em>. <em>element.value</em> reflects old value.</td></tr>
    <tr>
      <td bgcolor="#fffff0" valign="top">Event.EDIT_VALUE_CHANGED</td>
      <td bgcolor="#fffff0" valign="top">Value of editbox was just changed, generated by behaviors: <em>edit, number, decimal, date, masked</em>. <em>element.value</em> reflects new value.</td></tr>
    <tr>
      <td bgcolor="#fffff0" valign="top">Event.SELECT_SELECTION_CHANGED</td>
      <td bgcolor="#fffff0" valign="top">Selection was changed in elements-selectors. generated by behaviors: <em>select, dropdown-select, calendar</em>.</td></tr>
    <tr>
      <td bgcolor="#fffff0" valign="top">Event.SELECT_STATE_CHANGED</td>
      <td bgcolor="#fffff0" valign="top">State of item was changed in elements-selectors. generated by behaviors: <em>select</em> when some of the &lt;options&gt; are expanded/collapsed, <em>event.target</em> is the item that changed its state. <em>behavior: calendar</em> sends this event after calendar was switched to show another month so by handling this event you can update DOM inside the calendar. &nbsp;</td></tr>
    <tr>
      <td bgcolor="#fffff0" valign="top">Event.HYPERLINK_CLICK</td>
      <td bgcolor="#fffff0" valign="top">Click on hyperlink. <em>event.target</em> is that hyperlink element.</td></tr>
    <tr>
      <td bgcolor="#fffff0" valign="top">Event.ACTIVATE_CHILD</td>
      <td bgcolor="#fffff0" valign="top">Request to container to activate child. <em>accesskey</em> processor post this message if accesskey is defined for the element but element is passive, e.g. tab on Tabs control. See: extenders.js / type Tabs.</td></tr>
    <tr>
      <td bgcolor="#fffff0" valign="top">Event.POPUP_REQUEST</td>
      <td rowspan="3" bgcolor="#fffff0" valign="top">Secret stuff.</td></tr>
    <tr>
      <td bgcolor="#fffff0" valign="top">Event.POPUP_READY</td></tr>
    <tr>
      <td bgcolor="#fffff0" valign="top">Event.POPUP_DISMISSED</td></tr>
    <tr>
      <td bgcolor="#fffff0" valign="top">Event.MENU_ITEM_ACTIVE</td>
      <td bgcolor="#fffff0" valign="top">Happens when menu item is highlighted.</td></tr>
    <tr>
      <td bgcolor="#fffff0" valign="top">Event.MENU_ITEM_CLICK</td>
      <td bgcolor="#fffff0" valign="top">Click on menu item. <em>event.target</em> is the item <em>event.owner</em> is an owner of the popup menu.</td></tr>
    <tr>
      <td bgcolor="#fffff0" valign="top">Event.range 0x1000 .. 0x7FFF</td>
      <td bgcolor="#fffff0" valign="top">Custom control events. Any code from this range can be used in <em>element.sendEvent(code,...)</em> calls. <br/>If behavior class is designed to behave like for example a button then you may use <em>element.postEvent(Event.BUTTON_CLICK,...)</em> to notify all parties about clicks.</td></tr>
    <tr>
      <td bgcolor="#fffff0" valign="top" colspan="2"></td></tr>
    <tr>
      <td><strong><em>onGesture</em></strong>(event): true|false</td>
      <td bgcolor="#fffff0" valign="top" colspan="2">Gestures, DOM events, available on devcices with touch screen support.
        <p>See <strong>Gesture (touch screen) event codes</strong> in Event object definition.</p></td></tr>
    <tr>
      <td colspan="3">
        <h3>Non-bubbling events</h3></td></tr>
    <tr>
      <td rowspan="7" valign="top"><strong><em>onScroll</em></strong>(event) : true|false</td>
      <td bgcolor="#fffff0" valign="top">Event.SCROLL_HOME</td>
      <td rowspan="7" bgcolor="#fffff0" valign="top">
        <div>Requests to scroll, typically are coming from &lt;input type=vscrollbar&gt; or &lt;input type=hscrollbar&gt;.</div>
        <div>In case of SCROLL_POS use <em>event.scrollPos</em> field to get requested position to scroll.</div>
        <div></div></td></tr>
    <tr>
      <td bgcolor="#fffff0" valign="top">Event.SCROLL_END</td></tr>
    <tr>
      <td bgcolor="#fffff0" valign="top">Event.SCROLL_STEP_PLUS</td></tr>
    <tr>
      <td bgcolor="#fffff0" valign="top">Event.SCROLL_STEP_MINUS</td></tr>
    <tr>
      <td bgcolor="#fffff0" valign="top">Event.SCROLL_PAGE_PLUS</td></tr>
    <tr>
      <td bgcolor="#fffff0" valign="top">Event.SCROLL_PAGE_MINUS</td></tr>
    <tr>
      <td bgcolor="#fffff0" valign="top">Event.SCROLL_POS</td></tr>
    <tr>
      <td valign="top"><strong><em>attached</em></strong>() : void</td>
      <td colspan="2" bgcolor="#fffff0" valign="top">Method of behavior class (type). If defined in the type definition then it will be invoked by the engine when DOM element will be subclassed by this class. Variable <em>this</em> inside this function is a reference to the DOM element this behavior was just attached to. Consider <em>attached</em>() as an equivalent of constructor function for other classes.</td></tr>
    <tr>
      <td valign="top"><strong><em>onTimer</em></strong>() : true|false</td>
      <td colspan="2" bgcolor="#fffff0" valign="top">Timer tick. To start timer on the element use <em>element.timer(milliseconds)</em> call. Return <em>false</em> from this method to stop the timer.</td></tr>
    <tr>
      <td valign="top"><strong><em>onSize</em></strong>() : void</td>
      <td colspan="2" bgcolor="#fffff0" valign="top">Size of the element was changed. To get dimensions use <em>this.box()</em> function.</td></tr>
    <tr>
      <td colspan="3">Root specific events</td></tr>
    <tr>
      <td valign="top"><strong><em>self.ready</em></strong>()</td>
      <td colspan="2" bgcolor="#fffff0" valign="top">Event is generated as a final step of document loading.</td></tr>
    <tr>
      <td valign="top"><strong><em>self.closing</em></strong>() : true|false</td>
      <td colspan="2" bgcolor="#fffff0" valign="top">Document is about to be closed. Event handler can prevent unloading by returning <em>false</em> value.</td></tr></table>
  <h2 align="left"><a name="object-template">Element.create and Element.insert object-template microformat.</a></h2>
  <div>Object-template is an object literal used for generation of new elements. It shall obey following rules:</div>
  <pre>{
  div, <font face="monospace" color="#336600">// mandatory, first property and without value - tag name of the DOM element.
       // E.g. <em>div</em>, <em>p</em>, <em>option</em>, <em>select</em>, etc.
</font>   attr1name : <font face="monospace" color="#cc00cc">&quot;attr1value&quot;</font><font face="monospace">, </font><font face="monospace" color="#336600">// optional, attribute #1 of created dom element.
</font>   attrNname : <font face="monospace" color="#cc00cc">&quot;attrNvalue&quot;</font><font face="monospace">, </font><font face="monospace" color="#336600">// optional, attribute #N of created dom element.
  </font><font face="monospace" color="#cc00cc"> &quot;some text&quot;</font><font face="monospace">, </font><font face="monospace" color="#336600">// optional string, text of the DOM element
                // if that element is a text container like <em>p</em>,<em> text</em>, <em>span</em>, etc.
</font>  [ object-1, <font face="monospace" color="#cc00cc">&quot;text&quot;</font>, ... object-N ] <font face="monospace" color="#336600">// optional array of templates - definitions
                                     // of text and child elements of the element.
</font>}
</pre>
  <p>The &quot;text&quot; and [ children ] definitions are mutually exclusive - either one of them shall be defined or none.</p>
  <p>Example, following script:</p>
  <pre> sb.insert
 {
    div, class:&quot;dyn&quot;,
     [
      {p, &quot;Text1&quot; },
      {p, [&quot;Text2 before &quot;, {button, &quot;Hi!&quot;}, &quot; after&quot;] }
     ]
 };
</pre>
  <p>Is an equivalent of the following:</p>
  <pre>sb.insert(
   &quot;&quot;
   &quot;Text 1&quot;
   &quot;Text 2 before Hi! after&quot;
   &quot;&quot;
);
</pre>
</body>
</html>