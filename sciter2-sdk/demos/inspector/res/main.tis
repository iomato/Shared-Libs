include "res:log.tis";

// higlighted element change controller / event
function onHighlightedChanged(uid, byModule = null)
{
  var highlightedStack = view.getElementStack(uid);
  ElementDetails.show(uid,byModule);
  ElementStack.show(highlightedStack,byModule);
  DomTree.show(highlightedStack,byModule);
}

function highlightElement(elementUID, byModule = null)
{
  view.highlightElement(elementUID);
  onHighlightedChanged(elementUID, byModule);
}

//|
//| events generated by debuggee
//|
function onHostAttached()
{
}
function onHostDetached()
{
}

function onLogItemArrived()
{
  Log.update();
}

// onHostHighlightedChanged event
function onHostHighlightedChanged(elementUID)
{
  onHighlightedChanged(elementUID, #host);
}

function onHostContentChanged(elementUID = undefined)
{
  if( elementUID !== undefined )
    DomTree.onNodeModelChanged(elementUID);
  else
    DomTree.showRoot();
    //VirtualTree(domTreeWidget,DomTreeDataSource);
}


//|
//| Global hyperlink handler. Hyperlinks here are mostly 
//| references to debuggeee resources.
//|

self.onControlEvent = function(evt)
{
  if(evt.type == (Event.HYPERLINK_CLICK | Event.SINKING))
  {
    var path = evt.target.attributes["href"];
    if( path like "file://*" ) {
      path = path.substr(7).replace("/","\\");
      var line = evt.target.attributes["line"];
      var notepad = System.home("notepad2/notepad2.exe").replace("/","\\");
      var cmd = String.$("{notepad}" /g {line} "{path}"); 
      view.exec(cmd);
    }
    return true;
   }
};



// persistable settings:
namespace Settings
{
  const path = System.path(#USER_APPDATA, "sciter-inspector-settings.js");
  var   list = []; // list of persistable objects

  function store() 
  {
    var stream = Stream.openFile(path,"uw");
  
    if( !stream )
    {
      view.msgbox(#warning, "Cannot open file "+ path +" for writing. Settings will not be saved." );
      return;
    }
  
    var data = {};
    for(var persistable in list)
      persistable.store(data);

    stream.printf("%V\n",data);
    //stdout.printf("%V\n",data);
    stream.close();
  }

  function restore() 
  {
    var stream = Stream.openFile(path,"ur");
    if( !stream )
      return false;
    var data = parseData( stream );
    stream.close();

    for(var persistable in list)
      persistable.restore(data);
  }

  function add(persistable) { list.push(persistable); }
}

// window position persistence
Settings.add {
  store: function(data) 
    {
       var (x,y,w,h) = view.box(#rectw,#border,#screen);
       data.window = {left:x,top:y,width:w,height:h};  
    },
  restore: function(data) 
    {
       if( data.window )
         view.move(
           Integer.max(data.window.left,0),
           Integer.max(data.window.top,0),
           Integer.max(data.window.width,400),
           Integer.max(data.window.height,400)); 
    }
};
  
function saveState()
{
  self.timer(2000,Settings.store);
}

